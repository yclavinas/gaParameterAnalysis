return(df)
}
# create function to find the max value and where it is located
findMaxPosBenchmarks = function (benchmarck_index_function){
vectorAuxMax=findMaxBenchmarks(benchmarck_index_function)
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and std' , sep=''))
print(p1+ theme(legend.position="none"))
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
# geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and C.I.' , sep='')) +
geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
print(p1+ theme(legend.position="none"))
}
findMaxPosBenchmarks(19)
findMaxPosBenchmarks(20)
findMaxPosBenchmarks(21)
findMaxPosBenchmarks(22)
findMaxPosBenchmarks(23)
findMaxPosBenchmarks(24)
data=loadDataBenchmarksF1_F3('f24_2',i-1, skip = 0, nrows = 501)
tail(data)
data=loadDataBenchmarksF1_F3('f22_2',i-1, skip = 0, nrows = 501)tail(data)
data=loadDataBenchmarksF1_F3('f21_2',i-1, skip = 0, nrows = 501)tail(data)
data=loadDataBenchmarksF1_F3('f19_2',i-1, skip = 0, nrows = 501)tail(data)
data=loadDataBenchmarksF1_F3('f20_2',i-1, skip = 0, nrows = 501)tail(data)
data=loadDataBenchmarksF1_F3('f23_2',i-1, skip = 0, nrows = 501)tail(data)
data=loadDataBenchmarksF1_F3('f24_2',i-1, skip = 0, nrows = 501)tail(data)
data=loadDataBenchmarksF1_F3('f22_2',i-1, skip = 0, nrows = 501)
tail(data)
data=loadDataBenchmarksF1_F3('f21_2',i-1, skip = 0, nrows = 501)
tail(data)
data=loadDataBenchmarksF1_F3('f19_2',i-1, skip = 0, nrows = 501)
tail(data)
data=loadDataBenchmarksF1_F3('f20_2',i-1, skip = 0, nrows = 501)
tail(data)
data=loadDataBenchmarksF1_F3('f23_2',i-1, skip = 0, nrows = 501)
tail(data)
data=loadDataBenchmarksF1_F3('f24_2',i-1, skip = 0, nrows = 501)
tail(data)
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else{
print('entrou')
print(j)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 501)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
# mean=createMeanFromExecBenchmarks('F1_2', 0)
findMaxPosBenchmarks(19)
findMaxPosBenchmarks(20)
data=loadDataBenchmarksF1_F3('f20_2',i-1, skip = 0, nrows = 501)
tail(data)
# create function to find the mean of the 40 execs
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else{
print('entrou')
print(j)
print(name_function)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 501)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
findMaxPosBenchmarks(20)
i
i=1
data=loadDataBenchmarksF1_F3('f20_2',i-1, skip = 0, nrows = 501)
tail(data)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
name_function
name_function <- 'f20_2_0.txt'
name_function
data=loadDataBenchmarksF1_F3('f20_2',i-1, skip = 0, nrows = 501)
tail(data)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
name_function = 'f20_2'
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 500)
head(Data)
head(data)
tail(data)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
head(data)
tail(data)
name_function='f21_2'
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
head(data)
tail(data)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
name_function <- 'f22_2'
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
tail(data)
head(data)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
head(data)
tail(data)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 501)
tail(data)
name_function = 'f23_2'
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
head(data)
tail(data)
name_function = 'f24_2'
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
head(data)
tail(data)
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else if (j == 20 | j ==21 | j==23| j==24){
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
}
else{
print('entrou')
print(j)
print(name_function)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
findMaxPosBenchmarks(20)
findMaxPosBenchmarks(21)
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else if (j == 20 | j ==21 | j==23| j==24){
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
tail(data)
head(data)
}
else{
print('entrou')
print(j)
print(name_function)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
findMaxPosBenchmarks(19)
findMaxPosBenchmarks(20)
loadDataBenchmarksF1_F3 = function(type, i,  nrows = 500, skip=0){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip = skip)
return(data)
}
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else if (j == 20 | j ==21 | j==23| j==24){
print('20, 21, 23, 24')
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
tail(data)
head(data)
}
else{
print('entrou')
print(j)
print(name_function)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
findMaxPosBenchmarks(20)
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else if (j == 20 | j ==21 | j==23| j==24){
print('20, 21, 23, 24')
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
tail(data)
head(data)
}
else{
print('entrou')
print(j)
print(name_function)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
findMaxPosBenchmarks(20)
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else if (j == 20 | j ==21 | j==23| j==24){
print('20, 21, 23, 24')
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
print(data)
tail(data)
head(data)
}
else{
print('entrou')
print(j)
print(name_function)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else if (j == 20 | j ==21 | j==23| j==24){
print('20, 21, 23, 24')
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
print(tail(data))
printhead(data))
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else if (j == 20 | j ==21 | j==23| j==24){
print('20, 21, 23, 24')
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 1, nrows = 501)
print(tail(data))
print(head(data))
}
else{
print('entrou')
print(j)
print(name_function)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
findMaxPosBenchmarks(20)
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else{
print('entrou')
print(j)
print(name_function)
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
findMaxPosBenchmarks(20)
findMaxPosBenchmarks(21)
findMaxPosBenchmarks(22)
findMaxPosBenchmarks(23)
findMaxPosBenchmarks(24)
# setwd("~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/gaBenchmarksStudy")
#create function to read data with paste - header problems - GA
# loadDataGA_2_10 = function(type, i, nrows = 500){
#     filename = paste(type,'_',i,'.txt',sep='')
#     data = read.csv(file = filename, header = T, sep = '\t', skip=1,  nrows = nrows)
#     return(data)
# }
#
# # create function to read data with paste - header problems - GA
# loadDataGA_11_25 = function(type, i,  nrows = 500){
#     filename = paste(type,'_',i,'.txt',sep='')
#     data = read.csv(file = filename, header = T, sep = '\t', skip=3, nrows = nrows)
#     return(data)
# }
#
#create function to read data with paste - benchmarks
loadDataBenchmarksF4_F24 = function(type, i,  nrows = 500, skip=2){
filename = paste(type,'_',i,'.txt',sep='')
print('load f4-f24')
print(filename)
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip=skip)
return(data)
}
loadDataBenchmarksF1_F3 = function(type, i,  nrows = 500, skip=0){
filename = paste(type,'_',i,'.txt',sep='')
print('load f1-f3')
print(filename)
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip = skip)
return(data)
}
#
# createConvergencyDataGA = function (name_function, j){
#     df = data.frame()
#     for (i in 1:40) {
#         if (j == 2){
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         else if (j<=10) {
#             data=loadDataGA_2_10(name_function,i-1)
#         }
#         else{
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         df <- rbind(df, data)
#     }
#     minimum = (-1)*tapply(df$max, INDEX = df$gen, FUN = mean)
#     # std = tapply(df$std, INDEX = df$gen, FUN = mean)
#     # std = pmin(std, 200)
#     gen = c(1:500)
#     df = data.frame(minimum, std, gen)
#     df
# }
#
# plotforKGA = function(){
#     # for (j in 2:24){
#     j=5
#     name_function = paste('GA_',j, sep='')
#     # print(name_function)
#     vectorAuxMax = createConvergencyDataGA(name_function, j)
#     p1<- ggplot(vectorAuxMax, aes(gen, minimum, colour=vectorAuxMax$minimum)) +
#         # geom_errorbar(aes(ymin=vectorAuxMax$minimum-vectorAuxMax$std, ymax=vectorAuxMax$minimum+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('Number of generations') +
#         ylab('function mean value') +
#         ggtitle(name_function) #+
#     # geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
#     print(p1+ theme(legend.position="none"))
#     # }
#
# }
#
# plotforKGA()
createConvergencyDataBenchmarks = function (name_function, j){
df = data.frame()
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else{
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
df <- rbind(df, data)
}
minimum = tapply(df$min, INDEX = df$gen, FUN = mean)
std = tapply(df$std, INDEX = df$gen, FUN = mean)
# std = pmin(std, 200)
gen = c(1:500)
df = data.frame(minimum, std, gen)
df
}
id = c(18, 15,13, 22, 15, 9, 7, 8, 20, 16, 11, 3, 12, 12, 16, 3, 7, 23, 7, 17, 23, 18, 6, 22)
ablines = c(1:24)
for (i in 1:24){
name_function = paste('F',i,'_',2, sep='')
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1, 501)
}
else if(i<19){
data=loadDataBenchmarksF4_F24(name_function,i-1, 501)
}
else{
data=loadDataBenchmarksF1_F3(name_function,i-1, skip=0, nrows = 502)
}
ablines[i] = data$gen[501]
}
plotforKBenchmarks = function(k){
# for (j in 2:25){
j=id[k]
name_function = paste('F',k,'_',j, sep='')
vectorAuxMax = createConvergencyDataBenchmarks(name_function, k)
name_function = paste('F',k, sep='')
p1<- ggplot(vectorAuxMax, aes(gen, minimum, colour=vectorAuxMax$minimum)) +
# geom_errorbar(aes(ymin=vectorAuxMax$minimum-vectorAuxMax$std, ymax=vectorAuxMax$minimum+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('Number of generations') +
ylab('function mean value') +
geom_hline(yintercept = ablines[k], color = "red") +
ggtitle(paste(name_function,'with last gen mean: ', vectorAuxMax$minimum[500], 'and target value:', ablines[k]))#+
# geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
print(p1+ theme(legend.position="none"))
# }
}
for (i in 1:24){
plotforKBenchmarks(i)
}
findMaxPosBenchmarks = function (benchmarck_index_function){
vectorAuxMax=findMaxBenchmarks(benchmarck_index_function)
print(vectorAuxMax$std)
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and std' , sep=''))
print(p1+ theme(legend.position="none"))
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
# geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and C.I.' , sep='')) +
geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
print(p1+ theme(legend.position="none"))
}
findMaxPosBenchmarks(20)
