lines(density(simulated.data), lwd=3, col="red")
lines(x, y*20,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 200)
lines(density(simulated.data), lwd=3, col="red")
lines(x, y*50,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 200)
lines(density(simulated.data)*50, lwd=3, col="red")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 200)
lines(density(simulated.data)*50, lwd=3, col="red")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 200)
lines(density(simulated.data), lwd=3, col="red")
lines(x, y*50,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 200)
lines(density(simulated.data), lwd=3, col="red")
lines(x, y,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray')
lines(density(simulated.data), lwd=3, col="red")
lines(x, y,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray')
lines(density(simulated.data), lwd=3, col="red")
lines(x, y*50,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 100)
lines(density(simulated.data), lwd=3, col="red")
lines(x, y,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 100)
lines(density(simulated.data), lwd=3, col="red")
lines(x, y*50,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 100)
lines(density(simulated.data), lwd=3, col="red")
lines(x, y*100,  col = "blue", lwd="2")
density(simulated.data)
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 100)
lines(density(simulated.data)$x, density(simulated.data)$y, lwd=3, col="red")
lines(x, y*100,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 100)
lines(density(simulated.data)$x, density(simulated.data)$y*100, lwd=3, col="red")
lines(x, y*100,  col = "blue", lwd="2")
knitr::opts_chunk$set(echo = TRUE)
data("ToothGrowth")
str(ToothGrowth)
t.test(len ~ supp, data = ToothGrowth)
?t.test
data("ToothGrowth")
str(ToothGrowth)
# loading the data
data("ToothGrowth")
# Taking a look at it
str(ToothGrowth)
# converting dose from numeric to factor
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
# looking at the dataset again
str(ToothGrowth)
t.test(len ~ supp, data = ToothGrowth)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
g <- ggplot(ToothGrowth, aes(x = dose, y = len, dose = factor(supp)))
g <- g + geom_line(size = 1, aes(colour = supp)) + geom_point(size =10, pch = 21,  alpha = .5)
g
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + geom_line(data=avg,aes(group=supp,colour=supp))
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + geom_line(data=ToothGrowth,aes(group=supp,colour=supp))
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
print(g)
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + geom_line(data=mean(ToothGrowth),aes(group=supp,colour=supp))
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + geom_line(data=mean(ToothGrowth$len),aes(group=supp,colour=supp))
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
print(g)
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,alpha=0.6))
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
print(g)
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp)
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp))
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
print(g)
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp))
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
print(g)
plot(ToothGrowth$dose, ToothGrowth$len)
plot(ToothGrowth$dose, ToothGrowth$len)
plot(ToothGrowth$dose, ToothGrowth$len)
plot(ToothGrowth$dose, ToothGrowth$len)
plot(ToothGrowth$dose, ToothGrowth$len, title="Tooth ength growth by dose")
plot(ToothGrowth$dose, ToothGrowth$len, title="Tooth ength growth by dose", xlab= 'Dose', ylab='Length')
plot(ToothGrowth$dose, ToothGrowth$len, main="Tooth ength growth by dose", xlab= 'Dose', ylab='Length')
t.test(len ~ supp, data = dose1)
# Separating the data from the 3 dose groups
dose1 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
dose2 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
dose3 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
t.test(len ~ supp, data = dose1)
t.test(len ~ supp, data = dose2)
t.test(len ~ supp, data = dose3)
# Separating the data from the 3 dose groups
dose1 <- subset(ToothGrowth, ToothGrowth$dose %in% c(0.5, 1.0))
dose2 <- subset(ToothGrowth, ToothGrowth$dose %in% c(0.5, 2.0))
dose3 <- subset(ToothGrowth, ToothGrowth$dose %in% c(1.0, 2.0))
t.test(len ~ supp, data = dose1)
t.test(len ~ supp, data = dose2)
t.test(len ~ supp, data = dose3)
dose1 <- subset(ToothGrowth, ToothGrowth$dose %in% c(1.0, 0.5))
t.test(len ~ supp, data = dose1)
t.test(len ~ dose1, data = dose1)
# Separating the data from the 3 dose groups
dose1 <- subset(ToothGrowth, ToothGrowth$dose %in% c(0.5, 1.0))
dose2 <- subset(ToothGrowth, ToothGrowth$dose %in% c(0.5, 2.0))
dose3 <- subset(ToothGrowth, ToothGrowth$dose %in% c(1.0, 2.0))
t.test(len ~ dose, data = dose1)
t.test(len ~ dose, data = dose2)
t.test(len ~ dose, data = dose3)
require(swirl)
install_from_swirl("Regression Models")
swirl()
swirl()
plot(child˜parent, galton)
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
require(swirl)
swirl()
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes+varEst))
all.equal(varChild, varRes+varEst)
efit <- lm)accel ~ mag + dist, attenu)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit$residuals)
cov(attenu$mag)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
require(swirl)
swirl()
cor(gpa_nor, pch_nor)
cor(gpa_nor, gch_nor)
l_nor <- lm(gpa_nor ~ gch_nor)
l_nor <- lm(gc_nor ~ gpa_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*x - mean(x))^2
sum(x*x - mean(x)^2)
sum(w*x - mean(x)^2)
mean(x)
sum(( w*x - mean(x)) ^2)
sum(( w*x - mean(x)) c^2)
x - mean(x)
w(x - mean(x))
w*(x - mean(x))
w*(x - mean(x))^2
sum(w*(x - mean(x))^2)
sum(w*(x - 0.0025)^2)
sum(w*(x - v)^2)
sum(w*(x - 0.1471)^2)
sum(w*(x - 0.3)^2)
sum(w*(x - 1.077)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
𝚍𝚊𝚝𝚊(𝚖𝚝𝚌𝚊𝚛𝚜)
𝚍𝚊𝚝𝚊(𝚖𝚝𝚌𝚊�𝚜)
data(mtcars)
lm(mpg ~ weight, mtcars)
lm(mpg ~ weight, data=mtcars)
mtcars$wt
lm(mpg ~ wt, data=mtcars)
lm(wt ~ mpg, data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x/max(x)-min(x)
x/max(x)
x/min(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
data(mtcars)
lm(x~y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum(x - 0.1471)^2)
sum((x - 0.1471)^2)
sum((x - 0.4)^2)
sum((x - 0.44)^2)
sum((x - 0.8)^2)
sum((x - 0.36)^2)
sum((x - 0.573)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
summary(lm(y ~ x))
summary(lm(y -mean(y)~ x - mean(x)))
lm(y -mean(y) ~ x - mean(x))
mean(x)
x-mean(x)
y-mean(y)
a <- y-mean(y)
b <- x - mean(x)
lm(a~b)
summary(lm(a~b))
require(swirl)
swirl()
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2/(n-2)))
sqrt(sum(fit$residuals^2)/(n-2))
sumarry(fit)$sigma
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(galton$child - fitted.values)
sRes <- deviance(galton$child - fit)
sRes <- deviance(galton$child)
sRes <- deviance(galton$child  - mu)
sRes <- deviance(sTot  - mu)
sRes <- deviance(sTot  - mu)
sRes <- deviance()
sRes <- deviance(mu)
sRes <- deviance(sTot)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
1-Sres/sTot
1-sRes/sTot
summary(fit)$r.squared
cor(child ~ parents, galton)
cor(child ~ parent, galton)
cor(galton$child, galton$parent)^2
lm(x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(˜)
lm(x~y)
t.test(lm(x~y))
out <- lm(x~y)
out
summary(out)
0.2038^2
require(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parents -1, galton)
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm (Volume ~Girth + Height + Constatnt -1, trees)
fit <- lm (Volume ~Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~Height + Constant -1, tress2)
fit2 <- lm(Volume ~Height + Constant -1 , trees2)
lapply(list(fit, fit2), coef)
all <- (Fertility ~ ., swiss)
all <- (Fertility ~ ".", swiss)
all <- (Fertility ~ Agriculture, Examination, Education, Catholic, Infant.Mortality, swiss)
all <- (Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, swiss)
all <- (Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data =swiss)
all <- (Fertility ~ Agriculture, swiss)
all <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data =swiss)
summuary(all)
summary(all)
(Fertility ~ Agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summaru(lm(Fertility ~ Agriculture, swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination ~ Education, swiss)
cor(Examination ~ Education)
cor(swiss$Examination ~ swiss$Education)
cor(swiss$Examination, swiss$Education)
cor(Agriculture ~ Education, swiss)
cor(Agriculture, Education, swiss)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit$coefficients - all$coefficients
all$coefficients - efit$coefficients
loadDimension <- function(dim){
workdir <- paste0("results_UniformGaussian",dim,"D/")
ddd <- NULL
for (j in 2:24) {
dd <- NULL
for (i in 2:40) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
k_subsetting <- function(data, k_interval = NULL){
if (!is.null(k_interval)){
data <- data[k %in% c(k_interval)]
}
else{
data <- data
}
}
f_subsetting <- function(data, f_interval = NULL){
if (!is.null(f_interval)){
data <- data[f %in% c(f_interval)]
}
else{
data <- data
}
}
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = tail(data)$V1
}
#function to plot k versus min value given an interval (function goes in graph)
k_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(k, min, color = f, group = means$f))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .7,method = 'lm')+
geom_hline(yintercept = ablines[f_interval], color = "red")+
theme(legend.position="none")
p10$labels$colour <- "Function"
p10$labels$title <- paste("Function",f_interval,"with",dim,"dimensions")
grid.arrange(arrangeGrob(p10+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value", rot = 90),
bottom = textGrob("Tournament size")
)
)
}
# k_min_plot(means10, means20, means40, f_interval = c(1))
#function to plot f versus min value given an interval (k goes in graph)
f_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(f, min, color = k, group = means$k))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .3,method = 'lm')+
p10$labels$title <- paste("Function",f_interval,"with",dim,"dimensions")
p10$labels$colour <- "Tour. size"
p10$labels$title <- paste("Function",f_interval,dim,"dimensions")
grid.arrange(arrangeGrob(p10+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob(" Tournament size"),
bottom = textGrob("Function")))
}
# processing data
## getting data of only the last gen
# ddd10 <- loadDimension(10)
# ddd20 <- loadDimension(20)
ddd40 <- loadDimension(40)
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
ddd40 <- loadDimension(40)
loadDimension <- function(dim){
workdir <- paste0("results_UniformGaussian",dim,"D/")
ddd <- NULL
for (j in 2:24) {
dd <- NULL
for (i in 2:20) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
ddd40 <- loadDimension(40)
group <- as.data.table(ddd40)
ddd40 <- group[group[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
group <- as.data.table(ddd40)
ddd40 <- group[group[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
means40 <- aggregate(ddd40, list(k = ddd40$k, f = ddd40$f), mean)
means40 <- as.data.table(means40)
friedman.test(min ~ k | f, data = means40)
PT = pairwiseSignTest(min ~ k, data = means40, method = "fdr")
library(rcompanion)
PT = pairwiseSignTest(min ~ k, data = means40, method = "fdr")
cldList(p.adjust ~ Comparison, data = PT, treshold = 0.05)
k_min_plot(means40, k_interval = NULL, f_interval = c(24), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(23), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(22), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(21), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(20), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(19), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(18), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(17), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(16), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(15), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(14), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(13), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(12), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(11), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(10), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(9), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(8), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(7), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(6), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(5), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(4), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(3), dim = 40)
k_min_plot(means40, k_interval = NULL, f_interval = c(2), dim = 40)
ddd40 <- loadDimension(40)
friedman.test(min ~ k | f, data = means40)
for (i in c(2:24)){
png(file = paste0(i,"dim_40.png"), 480, 480)
k_min_plot(means40, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(2:24)){
png(file = paste0(i,"dim_40.png"), 480, 480)
k_min_plot(means40, k_interval = NULL, f_interval = c(i), dim = 40)
# dev.off()
}
for (i in c(2:24)){
png(file = paste0(i,"dim_40.png"), 480, 480)
k_min_plot(means40, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
