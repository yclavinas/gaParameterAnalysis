testing = adData[-inTrain,]
preProcess(training[,grep('^IL',names(training))], method = "pca", thres=.8)
pca_data <- data.frame(training[,grep('^IL',names(training))], training$diagnosis)
head(pca_data)
predictedCA_train <- (pp_dataPCA, pca_data_training[-13])
predictedCA_train <- predict(pp_dataPCA, pca_data_training[-13])
pp_dataPCA <- preProcess(training[,grep('^IL',names(training))], method = "pca", thres=.8)
predictedCA_train <- predict(pp_dataPCA, pca_data_training[-13])
pca_data_training <- data.frame(training[,grep('^IL',names(training))], training$diagnosis)
pca_data_testing <- data.frame(testing[,grep('^IL',names(testing))], testing$diagnosis)
pp_dataPCA <- preProcess(training[,grep('^IL',names(training))], method = "pca", thres=.8)
predictedCA_train <- predict(pp_dataPCA, pca_data_training[-13])
predictedCA_train
pp_dataPCA_traning <- preProcess(pca_data_traning[-13], method = "pca", thres=.8)
pp_dataPCA_training <- preProcess(pca_data_training[-13], method = "pca", thres=.8)
pp_dataPCA_testing <- preProcess(pca_data_testing[-13], method = "pca", thres=.8)
PCFit <- train(pca_data_training$training.diagnosis~.,data=predictedCA_training,method="glm")
predictedCA_training <- predict(pp_dataPCA_training, pca_data_training[-13])
predictedPCA_training <- predict(pp_dataPCA_training, pca_data_training[-13])
PCFit <- train(pca_data_training$training.diagnosis~.,data=predictedPCA_training,method="glm")
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
trainSmall$training.diagnosis
trainPC
PCFit <- train(trainSmall$training.diagnosis~.,data=preProc,method="glm")
preProc
plot(trainPC)
plot(trainPC[,1], trainPC(,2))
plot(trainPC[,1], trainPC[,2]))
plot(trainPC[,1], trainPC[,2])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
names(trainSmall)
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
preProc <- preProcess(log10(trainSmall[-13]+1),method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
preProcess(log10(trainSmall[-13]+1),method="pca",thres=.8)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type~.,method="glm",data=trainPC)
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$type,predict(modelFit,testing))
training$type
odelFit <- train(y=training$type,method="glm",x=trainPC)
training$type
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",family = "binomial"
,data=training)
modelFit <- train(x = trainPC, y = training$type,method="glm")
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
install.packages("devtools")
require(devtools)
install_version("caret", version = "6.0-58",repos = "http://cran.us.r-project.org")
install.packages("devtools")
require(devtools)
install_version("caret", version = "6.0-58",repos = "http://cran.us.r-project.org")
modelFit <- train(x = trainPC, y = training$type,method="glm")
modelFit <- train(x = trainPC, y = training$type,method="glm")
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",family = "binomial"
,data=training)
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
modelFit <- train(x = trainPC, y = training$type,method="glm")
warnings()
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
warnings()
confusionMatrix(testing$type,predict(modelFit,testPC))
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",family = "binomial"
,data=training)
modelFit <- train(x = trainPC, y = training$type,method="glm")
newtraining <- subset(training, select = c(diagnosis, IL_11:IL_8))
newtesting <- subset(testing, select = c(diagnosis, IL_11:IL_8))
preproc <- preProcess(newtraining[,-1], method = "pca", thresh = 0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
newtraining <- subset(training, select = c(diagnosis, IL_11:IL_8))
newtesting <- subset(testing, select = c(diagnosis, IL_11:IL_8))
# Attempt 1
preproc <- preProcess(newtraining[,-1], method = "pca", thresh = 0.8)
trainPC <- predict(preproc, newtraining[,-1])
PCfit <- train(newtraining$diagnosis ~ ., method = "glm", data = trainPC)
# This gave an error due to column selection
# Attempt 2
*** train() redacted to comply with Coursera Honor Code ***
myFit <-  train(diagnosis~., data=newtraining, ...)
confusionMatrix(newtesting$diagnosis, predict(myFit, newtesting))
?train
*** train() redacted to comply with Coursera Honor Code ***
myFit <-  train(diagnosis~., data=newtraining, ...)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca")
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.9)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.95)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca")
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.9)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca")
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(log10(trainSmall[-13]+1),method="pca",thres=.8)
preProc <- preProcess(log10(trainSmall[-13]),method="pca",thres=.8)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.7)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
modelFit <- train(training$type ~ ., method='glm', preProcess = 'pca', data=training)
modelFit <- train(training$training.diagnosis ~ ., method='glm', preProcess = 'pca', data=training)
modelFit <- train(training$diagnosis ~ ., method='glm', preProcess = 'pca', data=training)
training$diagnosis
modelFit <- train(training$diagnosis ~ ., method="glm", preProcess = "pca", data=training)
modelFit <- train(trainSmall$diagnosis ~ ., method="glm", preProcess = "pca", data=training)
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.7)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
modelFit <- train(trainSmall$diagnosis ~ ., method="glm", preProcess = "pca", data=trainSmall)
trainSmall$training.diagnosis
modelFit <- train(trainSmall$training.diagnosis ~ ., method="glm", preProcess = "pca", data=trainSmall)
confusionMatrix(testSmall$testing.diagnosis, predict(modelFit, testing))
modelFit <- train(trainSmall$training.diagnosis ~ ., method="glm", preProcess = "pca", data=trainSmall, thres=.7)
?train
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?train
modelFit <- train(trainSmall$training.diagnosis ~ ., method="glm", preProcess = c("pca", thres=.7), data=trainSmall)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.7)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
modelFit <- train(trainSmall$training.diagnosis ~ ., method="glm", preProcess = c("pca", thres=.7), data=trainSmall)
getModelInfo())
getModelInfo()
modelFit <- train(trainSmall$training.diagnosis ~ ., method="svmLinearWeights2", preProcess = "pca", data=trainSmall)
modelFit <- train(trainSmall$training.diagnosis ~ ., method="lssvmLinear", preProcess = "pca", data=trainSmall)
modelFit <- train(trainSmall$training.diagnosis ~ ., method="brnn", preProcess = "pca", data=trainSmall)
modelFit <- train(trainSmall$training.diagnosis ~ ., method="brnn", preProcess = "pca", data=trainSmall)
modelFit <- train(trainSmall$training.diagnosis ~ ., method="earth", preProcess = "pca", data=trainSmall)
modelFit <- train(trainSmall$training.diagnosis ~ ., method="brnn", neurons=10, preProcess = "pca", data=trainSmall)
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/gaParameterAnalysis/data")
# load data
loadDimension <- function(dim){
workdir <- paste0("results_UniformGaussian",dim,"D/")
ddd <- NULL
for (j in 1:24) {
dd <- NULL
for (i in 2:24) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
ddd10 <- loadDimension(10)
ddd20 <- loadDimension(20)
ddd20 <- as.data.table(ddd20)
save(ddd20, file = "ddd20.RData")
ddd40 <- loadDimension(40)
ddd40 <- as.data.table(ddd40)
save(ddd40, file = "ddd40.RData")
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/gaParameterAnalysis/data")
# load data
loadDimension <- function(dim){
workdir <- paste0("results_SBX",dim,"D/")
ddd <- NULL
for (j in 1:24) {
dd <- NULL
for (i in 2:24) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
ddd10_sbx <- loadDimension(10)
ddd20_sbx <- loadDimension(20)
ddd20 <- as.data.table(ddd20)
save(ddd20, file = "ddd20.RData")
ddd40 <- loadDimension(40)
ddd40 <- as.data.table(ddd40)
save(ddd40, file = "ddd40.RData")
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-sbx.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-2n2n.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-2n2n.R')
setwd("~/Documents/estudos/gaParameterAnalysis/data/")
library(rcompanion)
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/gaParameterAnalysis/data")
# load data
loadDimension <- function(dim){
workdir <- paste0("results-2n-2n-sbx-",dim,"D/")
ddd <- NULL
for (j in 1:24) {
dd <- NULL
for (i in 2:24) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
ddd40_2n2n <- loadDimension(40)
ddd40_2n2n <- as.data.table(ddd40_2n2n)
save(ddd40_2n2n, file = "ddd40-2n2n.RData")
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-2n2n.R')
load("ddd40_2n2n.RData")
load("ddd40-2n2n.RData")
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-2n2n.R')
setwd("~/Documents/estudos/gaParameterAnalysis/data/")
library(rcompanion)
f_interval=c(2,5,6,7,8,9,10,11,12,13,14)
multimodal10_2n2n <- means10_2n2n[f %in% c(f_interval)]
multimodal20_2n2n <- means20_2n2n[f %in% c(f_interval)]
f_interval=c(2,5,6,7,8,9,10,11,12,13,14)
unimodal10_2n2n <- means10_2n2n[f %in% c(f_interval)]
unimodal20_2n2n <- means20_2n2n[f %in% c(f_interval)]
unimodal40_2n2n <- means40_2n2n[f %in% c(f_interval)]
f_interval=c(3,4,15,16,17,18,19,20,21,22,23,24)
multimodal10_2n2n <- means10_2n2n[f %in% c(f_interval)]
multimodal20_2n2n <- means20_2n2n[f %in% c(f_interval)]
multimodal40_2n2n <- means40_2n2n[f %in% c(f_interval)]
friedman.test(min ~ k | f, data = unimodal10_2n2n)
friedman.test(min ~ k | f, data = multimodal10_2n2n)
friedman.test(min ~ k | f, data = means10_2n2n)
friedman.test(min ~ k | f, data = unimodal20_2n2n)
friedman.test(min ~ k | f, data = multimodal20_2n2n)
friedman.test(min ~ k | f, data = means20_2n2n)
friedman.test(min ~ k | f, data = unimodal20_2n2n)
friedman.test(min ~ k | f, data = unimodal40_2n2n)
friedman.test(min ~ k | f, data = multimodal40_2n2n)
friedman.test(min ~ k | f, data = means40_2n2n)
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-sbx.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-sbx.R')
source('dataPlot-sbx.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-sbx.R')
f_interval=c(2,5,6,7,8,9,10,11,12,13,14)
unimodal20_sbx <- means20_sbx[f %in% c(f_interval)]
unimodal40_sbx <- means40_sbx[f %in% c(f_interval)]
f_interval=c(3,4,15,16,17,18,19,20,21,22,23,24)
multimodal20_sbx <- means20_sbx[f %in% c(f_interval)]
multimodal40_sbx <- means40_sbx[f %in% c(f_interval)]
friedman.test(min ~ k | f, data = unimodal20_sbx)
friedman.test(min ~ k | f, data = multimodal20_sbx)
friedman.test(min ~ k | f, data = means20_sbx)
friedman.test(min ~ k | f, data = unimodal40_sbx)
friedman.test(min ~ k | f, data = multimodal40_sbx)
friedman.test(min ~ k | f, data = means40_sbx)
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot.R')
f_interval=c(2,5,6,7,8,9,10,11,12,13,14)
unimodal20 <- means20[f %in% c(f_interval)]
unimodal40 <- means40[f %in% c(f_interval)]
f_interval=c(3,4,15,16,17,18,19,20,21,22,23,24)
multimodal20 <- means20[f %in% c(f_interval)]
multimodal40 <- means40[f %in% c(f_interval)]
friedman.test(min ~ k | f, data = unimodal20)
friedman.test(min ~ k | f, data = multimodal20)
friedman.test(min ~ k | f, data = means20)
friedman.test(min ~ k | f, data = unimodal40)
friedman.test(min ~ k | f, data = multimodal40)
friedman.test(min ~ k | f, data = means40)
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot.R')
f_interval=c(2,5,6,7,8,9,10,11,12,13,14)
unimodal20 <- means20[f %in% c(f_interval)]
unimodal40 <- means40[f %in% c(f_interval)]
f_interval=c(3,4,15,16,17,18,19,20,21,22,23,24)
multimodal20 <- means20[f %in% c(f_interval)]
multimodal40 <- means40[f %in% c(f_interval)]
friedman.test(min ~ k | f, data = unimodal40)
friedman.test(min ~ k | f, data = multimodal40)
friedman.test(min ~ k | f, data = means40)
