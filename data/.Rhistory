training = adData[ inTrain,]
testing = adData[-inTrain,]
newtraining <- subset(training, select = c(diagnosis, IL_11:IL_8))
newtesting <- subset(testing, select = c(diagnosis, IL_11:IL_8))
# Attempt 1
preproc <- preProcess(newtraining[,-1], method = "pca", thresh = 0.8)
trainPC <- predict(preproc, newtraining[,-1])
PCfit <- train(newtraining$diagnosis ~ ., method = "glm", data = trainPC)
# This gave an error due to column selection
# Attempt 2
*** train() redacted to comply with Coursera Honor Code ***
myFit <-  train(diagnosis~., data=newtraining, ...)
confusionMatrix(newtesting$diagnosis, predict(myFit, newtesting))
?train
*** train() redacted to comply with Coursera Honor Code ***
myFit <-  train(diagnosis~., data=newtraining, ...)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca")
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.9)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.95)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca")
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.9)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca")
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
preProc <- preProcess(log10(trainSmall[-13]+1),method="pca",thres=.8)
preProc <- preProcess(log10(trainSmall[-13]),method="pca",thres=.8)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.7)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
modelFit <- train(training$type ~ ., method='glm', preProcess = 'pca', data=training)
modelFit <- train(training$training.diagnosis ~ ., method='glm', preProcess = 'pca', data=training)
modelFit <- train(training$diagnosis ~ ., method='glm', preProcess = 'pca', data=training)
training$diagnosis
modelFit <- train(training$diagnosis ~ ., method="glm", preProcess = "pca", data=training)
modelFit <- train(trainSmall$diagnosis ~ ., method="glm", preProcess = "pca", data=training)
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.7)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
modelFit <- train(trainSmall$diagnosis ~ ., method="glm", preProcess = "pca", data=trainSmall)
trainSmall$training.diagnosis
modelFit <- train(trainSmall$training.diagnosis ~ ., method="glm", preProcess = "pca", data=trainSmall)
confusionMatrix(testSmall$testing.diagnosis, predict(modelFit, testing))
modelFit <- train(trainSmall$training.diagnosis ~ ., method="glm", preProcess = "pca", data=trainSmall, thres=.7)
?train
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?train
modelFit <- train(trainSmall$training.diagnosis ~ ., method="glm", preProcess = c("pca", thres=.7), data=trainSmall)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.7)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
modelFit <- train(trainSmall$training.diagnosis ~ ., method="glm", preProcess = c("pca", thres=.7), data=trainSmall)
getModelInfo())
getModelInfo()
modelFit <- train(trainSmall$training.diagnosis ~ ., method="svmLinearWeights2", preProcess = "pca", data=trainSmall)
modelFit <- train(trainSmall$training.diagnosis ~ ., method="lssvmLinear", preProcess = "pca", data=trainSmall)
modelFit <- train(trainSmall$training.diagnosis ~ ., method="brnn", preProcess = "pca", data=trainSmall)
modelFit <- train(trainSmall$training.diagnosis ~ ., method="brnn", preProcess = "pca", data=trainSmall)
modelFit <- train(trainSmall$training.diagnosis ~ ., method="earth", preProcess = "pca", data=trainSmall)
modelFit <- train(trainSmall$training.diagnosis ~ ., method="brnn", neurons=10, preProcess = "pca", data=trainSmall)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6, list = FALSE) # 60% training
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
suppressMessages(library(rattle))
install.packages('rattle')
install.packages('RGtk2')
library(pgmm)
data(olive)
olive = olive[, -1]
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
model<-train(Area ~ ., data=olive, method="rpart")
predict(model, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
install.packages('El')
install.packages('ElemStatLearn')
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
missClass(testSA$chd, predict(model, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
missClass(testSA$chd, predict(model, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
missClass(trainSA$chd, predict(model, trainSA))
missClass(testSA$chd, predict(model, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
?predict
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
library(caret)
confusionMatrix(pred_rf, vowel.test$y)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)
confusionMatrix(pred_gbm, vowel.test$y)
combModFit <- train (y ~ . , data = predDF, method = "gam")
predDF <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
combModFit <- train (y ~ . , data = predDF, method = "gam")
confusionMatrix(
predict(vowel.fit.rf, vowel.test),
predict(vowel.fit.gbm, vowel.test)
)
confusionMatrix(
predict(pred_rf, vowel.test),
predict(pred_gbm, vowel.test)
)
confusionMatrix(
predict(mod_rf, vowel.test),
predict(mod_gbm, vowel.test)
)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(trainning)
str(training)
names(training)
mod_rf <- train(diagnosis ~ ., data = training, method = "rf")
set.seed(62433)
mod_rf <- train(diagnosis ~ ., data = training, method = "rf")
set.seed(62433)
mod_rf <- train(diagnosis ~ ., data = training, method = "rf")
set.seed(62433)
mod_gbm <- train(diagnosis ~ ., data = training, method = "gbm")
set.seed(62433)
mod_lda <- train(diagnosis ~ ., data = training, method = "lda")
mod_lda <- train(diagnosis ~ ., data = training, method = "lda")
set.seed(62433)
mod_lda <- train(diagnosis ~ ., data = training, method = "lda")
pred_rf <- predict(mod_rf, testing)
pred_gbm <- predict(mod_gbm, testing)
pred_lda <- predict(mod_lda, testing)
confusionMatrix(mod_rf, testing$diagnosis)$overall[1]
confusionMatrix(mod_, testing$diagnosis)$overall[1]
confusionMatrix(pred_rf, testing$diagnosis)$overall[1]
confusionMatrix(pred_gbm, testing$diagnosis)$overall[1]
confusionMatrix(pred_lda, testing$diagnosis)$overall[1]
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]# 0.804878
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, testing$diagnosis)$overall[1]# 0.804878
set.seed(62433)
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, testing$diagnosis)$overall[1]# 0.804878
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(elasticnet)
install.packages("elasticnet")
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mod_lasso <- train(diagnosis ~ ., data = training, method = "lasso")
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
plot.enet(mod_lasso$finalModel,
xvar="penalty", use.color=TRUE)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages('forecast')
mod_ts <- bats(tstrain)
library(forecast)
mod_ts <- bats(tstrain)
tstrain = ts(training$visitsTumblr)
tstrain
mod_ts <- bats(training)
mod_ts <- bats(tstrain)
tstrain = ts(training$visitsTumblr)
mod_ts <- bats(tstrain)
fcast <- forecast(bats, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr &  testing$visitsTumblr < fcast$upper)/nrow(testing)
fcast <- forecast(bats, level = 95, h = dim(testing)[1])
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod_ts <- bats(tstrain)
fcast <- forecast(bats, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr &  testing$visitsTumblr < fcast$upper)/nrow(testing)
library(lubridate) # For year() function below
library(forecast)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod_ts <- bats(tstrain)
fcast <- forecast(bats, level = 95, h = dim(testing)[1])
bats <- bats(tstrain)
fcast <- forecast(bats, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr &  testing$visitsTumblr < fcast$upper)/nrow(testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3525)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
confusionMatrix(pred_svm, testing$CompressiveStrength)
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/gaParameterAnalysis/data")
# load data
loadDimension <- function(dim){
workdir <- paste0("results-2n-2n-sbx-",dim,"D/")
ddd <- NULL
for (j in 1:24) {
dd <- NULL
for (i in 2:24) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
ddd40_2n2n <- loadDimension(40)
ddd40_2n2n <- as.data.table(ddd40_2n2n)
save(ddd40_2n2n, file = "ddd40-2n2n.RData")
ddd40_2n2n <- ddd40_2n2n[ddd40_2n2n[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
means40_2n2n <- aggregate(ddd40_2n2n, list(k = ddd40_2n2n$k, f = ddd40_2n2n$f), mean)
means40_2n2n <- as.data.table(means40_2n2n)
setwd("~/Documents/estudos/gaParameterAnalysis/data")
library(knitr)
library(ggplot2)
library(gridExtra)
require(data.table)
names = c("SphereF. ", "Ellipsoidal F.", "Rastrigin F.",
"Buche-Rastrigin F.", "Linear Slope",
"Attractive Sector F.", "Step Ellipsoidal F.",
"Rosenbrock F.", "Rosenbrock F. Rotated",
"Ellipsoidal F.", "Discus F.", "Bent Cigar F.",
"Sharp Ridge F.", "Different Powers F.",
"Rastrigin F.", "Weierstrass F.",
"Schaffers F7 F.",
"Schaffers F7 F. moderately ill-conditioned",
"Composite Griwank-Rosenbrock F. F8F2",
"Schwefel F.", "Gallagher's Gaussian 101-me Peaks F.",
"Gallagher's Gaussian 21-hi Peaks F.", "Katsuura F.",
"Lunacek bi-Rastrigin F.")
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = round(tail(data)$V1, 2)
}
plotforKGA = function(data, f_interval, algo, dim){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(2)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste0('Pop. C.: ', names[f_interval], ' with ', dim, "D ", "opt. val.:",  ablines[f_interval]))+
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
print(p1+ theme(legend.position="none"))
}
b_40 <- as.data.table(ddd40_2n2n)
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
pdf(file = paste0("../graphs/2n2n-40D/covergency_multimodal_2n2n_",  i,"_dim_40.pdf"))
plotforKGA(b_40, f_interval = c(i), algo = "SBX", dim = 40)
dev.off()
}
names = c("SphereF. ", "Ellipsoidal F.", "Rastrigin F.",
"Buche-Rastrigin F.", "Linear Slope",
"Attractive Sector F.", "Step Ellipsoidal F.",
"Rosenbrock F.", "Rosenbrock F. Rotated",
"Ellipsoidal F.", "Discus F.", "Bent Cigar F.",
"Sharp Ridge F.", "Different Powers F.",
"Rastrigin F.", "Weierstrass F.",
"Schaffers F7 F.",
"Schaffers F7 F. moderately ill-conditioned",
"Composite Griwank-Rosenbrock F. F8F2",
"Schwefel F.", "Gallagher's Gaussian 101-me Peaks F.",
"Gallagher's Gaussian 21-hi Peaks F.", "Katsuura F.",
"Lunacek bi-Rastrigin F.")
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = round(tail(data)$V1, 2)
}
plotforKGA = function(data, f_interval, algo, dim){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(2)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste0('Pop. C.: ', names[f_interval], ' with ', dim, "D ", "opt. val.:",  ablines[f_interval]))+
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
print(p1+ theme(legend.position="none"))
}
setwd("~/Documents/estudos/gaParameterAnalysis/data")
library(knitr)
library(ggplot2)
library(gridExtra)
require(data.table)
b_40 <- as.data.table(ddd40_2n2n)
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
pdf(file = paste0("../graphs/2n2n-40D/covergency_multimodal_2n2n_",  i,"_dim_40.pdf"))
plotforKGA(b_40, f_interval = c(i), algo = "SBX", dim = 40)
dev.off()
}
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
pdf(file = paste0("../graphs/2n2n-40D/covergency_unimodal_2n2n_",  i,"_dim_40.pdf"))
plotforKGA(b_40, f_interval = c(i), algo = "SBX", dim = 40)
dev.off()
}
ddd40_2n2n <- loadDimension(40)
ddd40_2n2n <- as.data.table(ddd40_2n2n)
save(ddd40_2n2n, file = "ddd40-2n2n.RData")
ddd40_2n2n <- ddd40_2n2n[ddd40_2n2n[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
means40_2n2n <- aggregate(ddd40_2n2n, list(k = ddd40_2n2n$k, f = ddd40_2n2n$f), mean)
means40_2n2n <- as.data.table(means40_2n2n)
b_40 <- as.data.table(ddd40_2n2n)
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
pdf(file = paste0("../graphs/2n2n-40D/covergency_multimodal_2n2n_",  i,"_dim_40.pdf"))
plotforKGA(b_40, f_interval = c(i), algo = "SBX", dim = 40)
dev.off()
}
-
load("ddd40-2n2n.RData")
load("ddd40-2n2n.RData")
b_40 <- as.data.table(ddd40_2n2n)
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
pdf(file = paste0("../graphs/2n2n-40D/covergency_multimodal_2n2n_",  i,"_dim_40.pdf"))
plotforKGA(b_40, f_interval = c(i), algo = "SBX", dim = 40)
dev.off()
}
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
pdf(file = paste0("../graphs/2n2n-40D/covergency_unimodal_2n2n_",  i,"_dim_40.pdf"))
plotforKGA(b_40, f_interval = c(i), algo = "SBX", dim = 40)
dev.off()
}
