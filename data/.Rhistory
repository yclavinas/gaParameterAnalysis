sum(( w*x - mean(x)) c^2)
x - mean(x)
w(x - mean(x))
w*(x - mean(x))
w*(x - mean(x))^2
sum(w*(x - mean(x))^2)
sum(w*(x - 0.0025)^2)
sum(w*(x - v)^2)
sum(w*(x - 0.1471)^2)
sum(w*(x - 0.3)^2)
sum(w*(x - 1.077)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
𝚍𝚊𝚝𝚊(𝚖𝚝𝚌𝚊𝚛𝚜)
𝚍𝚊𝚝𝚊(𝚖𝚝𝚌𝚊�𝚜)
data(mtcars)
lm(mpg ~ weight, mtcars)
lm(mpg ~ weight, data=mtcars)
mtcars$wt
lm(mpg ~ wt, data=mtcars)
lm(wt ~ mpg, data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x/max(x)-min(x)
x/max(x)
x/min(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
data(mtcars)
lm(x~y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum(x - 0.1471)^2)
sum((x - 0.1471)^2)
sum((x - 0.4)^2)
sum((x - 0.44)^2)
sum((x - 0.8)^2)
sum((x - 0.36)^2)
sum((x - 0.573)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
summary(lm(y ~ x))
summary(lm(y -mean(y)~ x - mean(x)))
lm(y -mean(y) ~ x - mean(x))
mean(x)
x-mean(x)
y-mean(y)
a <- y-mean(y)
b <- x - mean(x)
lm(a~b)
summary(lm(a~b))
require(swirl)
swirl()
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2/(n-2)))
sqrt(sum(fit$residuals^2)/(n-2))
sumarry(fit)$sigma
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(galton$child - fitted.values)
sRes <- deviance(galton$child - fit)
sRes <- deviance(galton$child)
sRes <- deviance(galton$child  - mu)
sRes <- deviance(sTot  - mu)
sRes <- deviance(sTot  - mu)
sRes <- deviance()
sRes <- deviance(mu)
sRes <- deviance(sTot)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
1-Sres/sTot
1-sRes/sTot
summary(fit)$r.squared
cor(child ~ parents, galton)
cor(child ~ parent, galton)
cor(galton$child, galton$parent)^2
lm(x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(˜)
lm(x~y)
t.test(lm(x~y))
out <- lm(x~y)
out
summary(out)
0.2038^2
require(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parents -1, galton)
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm (Volume ~Girth + Height + Constatnt -1, trees)
fit <- lm (Volume ~Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~Height + Constant -1, tress2)
fit2 <- lm(Volume ~Height + Constant -1 , trees2)
lapply(list(fit, fit2), coef)
all <- (Fertility ~ ., swiss)
all <- (Fertility ~ ".", swiss)
all <- (Fertility ~ Agriculture, Examination, Education, Catholic, Infant.Mortality, swiss)
all <- (Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, swiss)
all <- (Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data =swiss)
all <- (Fertility ~ Agriculture, swiss)
all <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data =swiss)
summuary(all)
summary(all)
(Fertility ~ Agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summaru(lm(Fertility ~ Agriculture, swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination ~ Education, swiss)
cor(Examination ~ Education)
cor(swiss$Examination ~ swiss$Education)
cor(swiss$Examination, swiss$Education)
cor(Agriculture ~ Education, swiss)
cor(Agriculture, Education, swiss)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit$coefficients - all$coefficients
all$coefficients - efit$coefficients
require(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays, class)
.class(InsectSprays)
class(InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(fit)$coef
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, spray2)
head(spray2)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[3] - fit$coef[2])/1.6011
(fit$coef[2] - fit$coef[3])/1.6011
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
influence.measures(lm(y ~ x))
lm(y ~ x)
require(swirl)
swirl(())
swirl(
)
dim(hunger)
948
names(hunger)
fit <- lm(hunger ~ year)
fit <- lm(X ~ year, hunger)
fit <- lm(X ~ Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF lm(Numeric[hunger$Sex=="Female"] ~ Years[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Years[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
dim(hunger)
948
names(hunger)
fit <- lm(numeric ~ Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
kmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
lmBoth
summary(lmBoth)
lmYear <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
lmInter <- lm(Numeric ~ Year + Sex + Year*Sex, hunger)
summary(lmInter)
swirl()
fit <- lm (y ~ x, out2)
plot(fit, which = 1)
fitno <- out2[-1,]
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which = 1)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- <- out2[1, "y"] - predict(fitno, out2[1,])
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
head(hatvalues(fit))
head(hatvalues(fit))
?hatvalues
sigma <- sqrt(deviance(fit)/df.residual(fit))
sigma*sqrt(1-hatvalues(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd,
| rstandard(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
\
sigma1 <-
sqrt(deviance(fitno)/residuals(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitmo, out2) from- predict(fit, out2)
dy <- predict(fitmo, out2) - predict(fit, out2)
dy <- predict(fitno, out2) - predict(fit, out2)
dy/sigma^2
sum(dy^2)/(2*sigma^2)
cooks.distance(fit)[1]
plot(fit, which = 5)
require(swirl)
swirl()
ravenData
glm(ravenWinNum ~ ravenScore + family, ravenData )
glm(ravenWinNum ~ ravenScore, binomial, ravenData )
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData )
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova)mdl
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
haed(hits)
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confit(mdl, 'date'))
exp(confint(mdl, 'date'))
which.max(hits,[,'visits'])
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, poisson, hits, offset = log(visits+1))
mdl2 <- glm(simplystats ~ date, poisson, hits, offset = log(visits+1))
summary(mdl2)
qpois(.95, mdl2$fitted.values[704])
k_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL, algo = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(k, min, color = f, group = means$f))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .7,method = 'lm')+
geom_hline(yintercept = ablines[f_interval], color = "red")+
theme(legend.position="none")
p10$labels$colour <- "Function"
p10$labels$title <- paste(names[f_interval],"with",dim,"dimensions - ", algo)
grid.arrange(arrangeGrob(p10+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value", rot = 90, gp=gpar(fontsize=28)),
bottom = textGrob("Tournament size", gp=gpar(fontsize=28))
)
)
}
#plot data
## Uniform - 20D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f",  i,"_dim_20.png"), 480, 480)
#   k_min_plot(means20, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/uniform-20D/unimodal_uniform_",  i,"_dim_20.png"))
k_min_plot(unimodal20, f_interval = c(i), dim = 20, algo = 'Uniform')
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/uniform-20D/multimodal_uniform_",  i,"_dim_20.png"))
k_min_plot(multimodal20, f_interval = c(i), dim = 20, algo = 'Uniform')
dev.off()
}
## Uniform - 40D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f",  i,"_dim_40.png"), 480, 480)
#   k_min_plot(means40, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/uniform-40D/unimodal_uniform_",  i,"_dim_40.png"))
k_min_plot(unimodal40, f_interval = c(i), dim = 40, algo = 'Uniform')
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/uniform-40D/multimodal_uniform_",  i,"_dim_40.png"))
k_min_plot(multimodal40, f_interval = c(i), dim = 40, algo = 'Uniform')
dev.off()
}
## SBX - 20D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f_sbx_",  i,"_dim_20.png"), 480, 480)
#   k_min_plot(means20_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/SBX-20D/unimodal_sbx_",  i,"_dim_20.png"))
k_min_plot(unimodal20_sbx, f_interval = c(i), dim = 20, algo = 'SBX')
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/SBX-20D/multimodal_sbx_",  i,"_dim_20.png"))
k_min_plot(multimodal20_sbx, f_interval = c(i), dim = 20, algo = 'SBX')
dev.off()
}
## SBX - 40D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f_sbx_",  i,"_dim_40.png"), 480, 480)
#   k_min_plot(means40_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/SBX-40D/unimodal_sbx_",  i,"_dim_40.png"))
k_min_plot(unimodal40_sbx, f_interval = c(i), dim = 40, algo = 'SBX')
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/SBX-40D/multimodal_sbx_",  i,"_dim_40.png"))
k_min_plot(multimodal40_sbx, f_interval = c(i), dim = 40, algo = 'SBX')
dev.off()
}
## 2n2n - 40D
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/2n2n-40D/unimodal_2n2n_",  i,"_dim_40.png"))
k_min_plot(unimodal40_2n2n, f_interval = c(i), dim = 40, algo = '2n2n')
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/2n2n-40D/multimodal_2n2n_",  i,"_dim_40.png"))
k_min_plot(multimodal40_2n2n, f_interval = c(i), dim = 40, algo = 'SBX')
dev.off()
}
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-sbx.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-2n2n.R')
setwd("~/Documents/estudos/gaParameterAnalysis/data/")
#unimodal data
f_interval=c(2,5,6,7,8,9,10,11,12,13,14)
unimodal20 <- means20[f %in% c(f_interval)]
unimodal20_sbx <- means20_sbx[f %in% c(f_interval)]
unimodal40 <- means40[f %in% c(f_interval)]
unimodal40_sbx <- means40_sbx[f %in% c(f_interval)]
unimodal40_2n2n <- means40_2n2n[f %in% c(f_interval)]
#multimodalF3, F4, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24
f_interval=c(3,4,15,16,17,18,19,20,21,22,23,24)
multimodal20 <- means20[f %in% c(f_interval)]
multimodal20_sbx <- means20_sbx[f %in% c(f_interval)]
multimodal40 <- means40[f %in% c(f_interval)]
multimodal40_sbx <- means40_sbx[f %in% c(f_interval)]
multimodal40_2n2n <- means40_2n2n[f %in% c(f_interval)]
names = c("SphereFunction ", "Ellipsoidal Function", "Rastrigin Function",
"Buche-Rastrigin Function", "Linear Slope",
"Attractive Sector Function", "Step Ellipsoidal Function",
"Rosenbrock Function", "Rosenbrock Function Rotated",
"Ellipsoidal Function", "Discus Function", "Bent Cigar Function",
"Sharp Ridge Function", "Different Powers Function",
"Rastrigin Function", "Weierstrass Function",
"Schaffers F7 Function",
"Schaffers F7 Function moderately ill-conditioned",
"Composite Griwank-Rosenbrock Function F8F2",
"Schwefel Function", "Gallagher's Gaussian 101-me Peaks Function",
"Gallagher's Gaussian 21-hi Peaks Function", "Katsuura Function",
"Lunacek bi-Rastrigin Function")
k_subsetting <- function(data, k_interval = NULL){
if (!is.null(k_interval)){
data <- data[k %in% c(k_interval)]
}
else{
data <- data
}
}
f_subsetting <- function(data, f_interval = NULL){
if (!is.null(f_interval)){
data <- data[f %in% c(f_interval)]
}
else{
data <- data
}
}
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = tail(data)$V1
}
#function to plot k versus min value given an interval (function goes in graph)
k_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL, algo = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(k, min, color = f, group = means$f))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .7,method = 'lm')+
geom_hline(yintercept = ablines[f_interval], color = "red")+
theme(legend.position="none")
p10$labels$colour <- "Function"
p10$labels$title <- paste(names[f_interval],"with",dim,"dimensions - ", algo)
grid.arrange(arrangeGrob(p10+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value", rot = 90, gp=gpar(fontsize=28)),
bottom = textGrob("Tournament size", gp=gpar(fontsize=28))
)
)
}
#plot data
## Uniform - 20D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f",  i,"_dim_20.png"), 480, 480)
#   k_min_plot(means20, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/uniform-20D/unimodal_uniform_",  i,"_dim_20.png"))
k_min_plot(unimodal20, f_interval = c(i), dim = 20, algo = 'Uniform')
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/uniform-20D/multimodal_uniform_",  i,"_dim_20.png"))
k_min_plot(multimodal20, f_interval = c(i), dim = 20, algo = 'Uniform')
dev.off()
}
## Uniform - 40D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f",  i,"_dim_40.png"), 480, 480)
#   k_min_plot(means40, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/uniform-40D/unimodal_uniform_",  i,"_dim_40.png"))
k_min_plot(unimodal40, f_interval = c(i), dim = 40, algo = 'Uniform')
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/uniform-40D/multimodal_uniform_",  i,"_dim_40.png"))
k_min_plot(multimodal40, f_interval = c(i), dim = 40, algo = 'Uniform')
dev.off()
}
## SBX - 20D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f_sbx_",  i,"_dim_20.png"), 480, 480)
#   k_min_plot(means20_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/SBX-20D/unimodal_sbx_",  i,"_dim_20.png"))
k_min_plot(unimodal20_sbx, f_interval = c(i), dim = 20, algo = 'SBX')
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/SBX-20D/multimodal_sbx_",  i,"_dim_20.png"))
k_min_plot(multimodal20_sbx, f_interval = c(i), dim = 20, algo = 'SBX')
dev.off()
}
## SBX - 40D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f_sbx_",  i,"_dim_40.png"), 480, 480)
#   k_min_plot(means40_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/SBX-40D/unimodal_sbx_",  i,"_dim_40.png"))
k_min_plot(unimodal40_sbx, f_interval = c(i), dim = 40, algo = 'SBX')
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/SBX-40D/multimodal_sbx_",  i,"_dim_40.png"))
k_min_plot(multimodal40_sbx, f_interval = c(i), dim = 40, algo = 'SBX')
dev.off()
}
## 2n2n - 40D
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/2n2n-40D/unimodal_2n2n_",  i,"_dim_40.png"))
k_min_plot(unimodal40_2n2n, f_interval = c(i), dim = 40, algo = '2n2n')
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/2n2n-40D/multimodal_2n2n_",  i,"_dim_40.png"))
k_min_plot(multimodal40_2n2n, f_interval = c(i), dim = 40, algo = 'SBX')
dev.off()
}
