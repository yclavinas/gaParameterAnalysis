lines(x, y*50,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 200)
lines(density(simulated.data), lwd=3, col="red")
lines(x, y,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray')
lines(density(simulated.data), lwd=3, col="red")
lines(x, y,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray')
lines(density(simulated.data), lwd=3, col="red")
lines(x, y*50,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 100)
lines(density(simulated.data), lwd=3, col="red")
lines(x, y,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 100)
lines(density(simulated.data), lwd=3, col="red")
lines(x, y*50,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 100)
lines(density(simulated.data), lwd=3, col="red")
lines(x, y*100,  col = "blue", lwd="2")
density(simulated.data)
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 100)
lines(density(simulated.data)$x, density(simulated.data)$y, lwd=3, col="red")
lines(x, y*100,  col = "blue", lwd="2")
# calculating the normal distribution
x <- seq(min(simulated.data), max(simulated.data), length=100)
y <- dnorm(x, mean=1/lambda, sd=(1/lambda/sqrt(n)))
# creating the hist with simulated.data, its density curve and the normal distribution
hist(simulated.data, main="Exponential Distribution vs Normal Distribution", xlab = "Mean of 40 simulated exponential sample", col='gray', breaks = 100)
lines(density(simulated.data)$x, density(simulated.data)$y*100, lwd=3, col="red")
lines(x, y*100,  col = "blue", lwd="2")
knitr::opts_chunk$set(echo = TRUE)
data("ToothGrowth")
str(ToothGrowth)
t.test(len ~ supp, data = ToothGrowth)
?t.test
data("ToothGrowth")
str(ToothGrowth)
# loading the data
data("ToothGrowth")
# Taking a look at it
str(ToothGrowth)
# converting dose from numeric to factor
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
# looking at the dataset again
str(ToothGrowth)
t.test(len ~ supp, data = ToothGrowth)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
g <- ggplot(ToothGrowth, aes(x = dose, y = len, dose = factor(supp)))
g <- g + geom_line(size = 1, aes(colour = supp)) + geom_point(size =10, pch = 21,  alpha = .5)
g
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + geom_line(data=avg,aes(group=supp,colour=supp))
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + geom_line(data=ToothGrowth,aes(group=supp,colour=supp))
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
print(g)
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + geom_line(data=mean(ToothGrowth),aes(group=supp,colour=supp))
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + geom_line(data=mean(ToothGrowth$len),aes(group=supp,colour=supp))
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
print(g)
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp,alpha=0.6))
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
print(g)
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp)
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp))
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
print(g)
g <- ggplot(data = ToothGrowth,aes(x=dose,y=len))
g <- g + geom_point(aes(group=supp,colour=supp))
g <- g + labs(title="Fig 1: Tooth Lenght (len) relative to Dosage(dose) & Supplement (supp)")
print(g)
plot(ToothGrowth$dose, ToothGrowth$len)
plot(ToothGrowth$dose, ToothGrowth$len)
plot(ToothGrowth$dose, ToothGrowth$len)
plot(ToothGrowth$dose, ToothGrowth$len)
plot(ToothGrowth$dose, ToothGrowth$len, title="Tooth ength growth by dose")
plot(ToothGrowth$dose, ToothGrowth$len, title="Tooth ength growth by dose", xlab= 'Dose', ylab='Length')
plot(ToothGrowth$dose, ToothGrowth$len, main="Tooth ength growth by dose", xlab= 'Dose', ylab='Length')
t.test(len ~ supp, data = dose1)
# Separating the data from the 3 dose groups
dose1 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
dose2 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
dose3 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
t.test(len ~ supp, data = dose1)
t.test(len ~ supp, data = dose2)
t.test(len ~ supp, data = dose3)
# Separating the data from the 3 dose groups
dose1 <- subset(ToothGrowth, ToothGrowth$dose %in% c(0.5, 1.0))
dose2 <- subset(ToothGrowth, ToothGrowth$dose %in% c(0.5, 2.0))
dose3 <- subset(ToothGrowth, ToothGrowth$dose %in% c(1.0, 2.0))
t.test(len ~ supp, data = dose1)
t.test(len ~ supp, data = dose2)
t.test(len ~ supp, data = dose3)
dose1 <- subset(ToothGrowth, ToothGrowth$dose %in% c(1.0, 0.5))
t.test(len ~ supp, data = dose1)
t.test(len ~ dose1, data = dose1)
# Separating the data from the 3 dose groups
dose1 <- subset(ToothGrowth, ToothGrowth$dose %in% c(0.5, 1.0))
dose2 <- subset(ToothGrowth, ToothGrowth$dose %in% c(0.5, 2.0))
dose3 <- subset(ToothGrowth, ToothGrowth$dose %in% c(1.0, 2.0))
t.test(len ~ dose, data = dose1)
t.test(len ~ dose, data = dose2)
t.test(len ~ dose, data = dose3)
require(swirl)
install_from_swirl("Regression Models")
swirl()
swirl()
plot(child˜parent, galton)
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
require(swirl)
swirl()
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes+varEst))
all.equal(varChild, varRes+varEst)
efit <- lm)accel ~ mag + dist, attenu)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit$residuals)
cov(attenu$mag)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
require(swirl)
swirl()
cor(gpa_nor, pch_nor)
cor(gpa_nor, gch_nor)
l_nor <- lm(gpa_nor ~ gch_nor)
l_nor <- lm(gc_nor ~ gpa_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*x - mean(x))^2
sum(x*x - mean(x)^2)
sum(w*x - mean(x)^2)
mean(x)
sum(( w*x - mean(x)) ^2)
sum(( w*x - mean(x)) c^2)
x - mean(x)
w(x - mean(x))
w*(x - mean(x))
w*(x - mean(x))^2
sum(w*(x - mean(x))^2)
sum(w*(x - 0.0025)^2)
sum(w*(x - v)^2)
sum(w*(x - 0.1471)^2)
sum(w*(x - 0.3)^2)
sum(w*(x - 1.077)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
𝚍𝚊𝚝𝚊(𝚖𝚝𝚌𝚊𝚛𝚜)
𝚍𝚊𝚝𝚊(𝚖𝚝𝚌𝚊�𝚜)
data(mtcars)
lm(mpg ~ weight, mtcars)
lm(mpg ~ weight, data=mtcars)
mtcars$wt
lm(mpg ~ wt, data=mtcars)
lm(wt ~ mpg, data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x/max(x)-min(x)
x/max(x)
x/min(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
data(mtcars)
lm(x~y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum(x - 0.1471)^2)
sum((x - 0.1471)^2)
sum((x - 0.4)^2)
sum((x - 0.44)^2)
sum((x - 0.8)^2)
sum((x - 0.36)^2)
sum((x - 0.573)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
summary(lm(y ~ x))
summary(lm(y -mean(y)~ x - mean(x)))
lm(y -mean(y) ~ x - mean(x))
mean(x)
x-mean(x)
y-mean(y)
a <- y-mean(y)
b <- x - mean(x)
lm(a~b)
summary(lm(a~b))
require(swirl)
swirl()
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2/(n-2)))
sqrt(sum(fit$residuals^2)/(n-2))
sumarry(fit)$sigma
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(galton$child - fitted.values)
sRes <- deviance(galton$child - fit)
sRes <- deviance(galton$child)
sRes <- deviance(galton$child  - mu)
sRes <- deviance(sTot  - mu)
sRes <- deviance(sTot  - mu)
sRes <- deviance()
sRes <- deviance(mu)
sRes <- deviance(sTot)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
1-Sres/sTot
1-sRes/sTot
summary(fit)$r.squared
cor(child ~ parents, galton)
cor(child ~ parent, galton)
cor(galton$child, galton$parent)^2
lm(x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(˜)
lm(x~y)
t.test(lm(x~y))
out <- lm(x~y)
out
summary(out)
0.2038^2
require(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parents -1, galton)
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm (Volume ~Girth + Height + Constatnt -1, trees)
fit <- lm (Volume ~Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~Height + Constant -1, tress2)
fit2 <- lm(Volume ~Height + Constant -1 , trees2)
lapply(list(fit, fit2), coef)
all <- (Fertility ~ ., swiss)
all <- (Fertility ~ ".", swiss)
all <- (Fertility ~ Agriculture, Examination, Education, Catholic, Infant.Mortality, swiss)
all <- (Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, swiss)
all <- (Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data =swiss)
all <- (Fertility ~ Agriculture, swiss)
all <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data =swiss)
summuary(all)
summary(all)
(Fertility ~ Agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summaru(lm(Fertility ~ Agriculture, swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination ~ Education, swiss)
cor(Examination ~ Education)
cor(swiss$Examination ~ swiss$Education)
cor(swiss$Examination, swiss$Education)
cor(Agriculture ~ Education, swiss)
cor(Agriculture, Education, swiss)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit$coefficients - all$coefficients
all$coefficients - efit$coefficients
require(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays, class)
.class(InsectSprays)
class(InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(fit)$coef
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, spray2)
head(spray2)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[3] - fit$coef[2])/1.6011
(fit$coef[2] - fit$coef[3])/1.6011
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
influence.measures(lm(y ~ x))
lm(y ~ x)
require(swirl)
swirl(())
swirl(
)
dim(hunger)
948
names(hunger)
fit <- lm(hunger ~ year)
fit <- lm(X ~ year, hunger)
fit <- lm(X ~ Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF lm(Numeric[hunger$Sex=="Female"] ~ Years[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Years[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
dim(hunger)
948
names(hunger)
fit <- lm(numeric ~ Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
kmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
lmBoth
summary(lmBoth)
lmYear <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
lmInter <- lm(Numeric ~ Year + Sex + Year*Sex, hunger)
summary(lmInter)
swirl()
fit <- lm (y ~ x, out2)
plot(fit, which = 1)
fitno <- out2[-1,]
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which = 1)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- <- out2[1, "y"] - predict(fitno, out2[1,])
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
head(hatvalues(fit))
head(hatvalues(fit))
?hatvalues
sigma <- sqrt(deviance(fit)/df.residual(fit))
sigma*sqrt(1-hatvalues(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd,
| rstandard(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
\
sigma1 <-
sqrt(deviance(fitno)/residuals(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitmo, out2) from- predict(fit, out2)
dy <- predict(fitmo, out2) - predict(fit, out2)
dy <- predict(fitno, out2) - predict(fit, out2)
dy/sigma^2
sum(dy^2)/(2*sigma^2)
cooks.distance(fit)[1]
plot(fit, which = 5)
require(swirl)
swirl()
ravenData
glm(ravenWinNum ~ ravenScore + family, ravenData )
glm(ravenWinNum ~ ravenScore, binomial, ravenData )
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData )
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova)mdl
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
haed(hits)
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confit(mdl, 'date'))
exp(confint(mdl, 'date'))
which.max(hits,[,'visits'])
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, poisson, hits, offset = log(visits+1))
mdl2 <- glm(simplystats ~ date, poisson, hits, offset = log(visits+1))
summary(mdl2)
qpois(.95, mdl2$fitted.values[704])
prof = c("2.881 ", "13.725", "27.437 ", "96.635")
plot(prof)
plot(c(1, 10, 25, 50),prof)
lines(prof)
plot(c(1, 10, 25, 50),prof)
lines(c(1,10,25,50))
lines(c(1,10,25,50), prof)
plot(c(1, 10, 25, 50),prof)
lines(c(1,10,25,50), prof)
library(AppliedPredictiveModeling)
install.packages("caret")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
install.packages("CORElearn")
library(AppliedPredictiveModeling)
install.packages("CORElearn")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/gaParameterAnalysis/data")
# load data
loadDimension <- function(dim){
workdir <- paste0("results_SBX",dim,"D/")
ddd <- NULL
for (j in 2:24) {
dd <- NULL
for (i in 2:24) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
# processing data
## getting data of only the last gen
ddd10_sbx <- loadDimension(10)
