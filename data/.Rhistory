fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF lm(Numeric[hunger$Sex=="Female"] ~ Years[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Years[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
dim(hunger)
948
names(hunger)
fit <- lm(numeric ~ Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
kmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
lmBoth
summary(lmBoth)
lmYear <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
lmInter <- lm(Numeric ~ Year + Sex + Year*Sex, hunger)
summary(lmInter)
swirl()
fit <- lm (y ~ x, out2)
plot(fit, which = 1)
fitno <- out2[-1,]
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which = 1)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- <- out2[1, "y"] - predict(fitno, out2[1,])
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
head(hatvalues(fit))
head(hatvalues(fit))
?hatvalues
sigma <- sqrt(deviance(fit)/df.residual(fit))
sigma*sqrt(1-hatvalues(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd,
| rstandard(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
\
sigma1 <-
sqrt(deviance(fitno)/residuals(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitmo, out2) from- predict(fit, out2)
dy <- predict(fitmo, out2) - predict(fit, out2)
dy <- predict(fitno, out2) - predict(fit, out2)
dy/sigma^2
sum(dy^2)/(2*sigma^2)
cooks.distance(fit)[1]
plot(fit, which = 5)
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/gaParameterAnalysis/data")
# load data
loadDimension <- function(dim){
workdir <- paste0("results_UniformGaussian",dim,"D/")
ddd <- NULL
for (j in 2:24) {
dd <- NULL
for (i in 2:24) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
k_subsetting <- function(data, k_interval = NULL){
if (!is.null(k_interval)){
data <- data[k %in% c(k_interval)]
}
else{
data <- data
}
}
f_subsetting <- function(data, f_interval = NULL){
if (!is.null(f_interval)){
data <- data[f %in% c(f_interval)]
}
else{
data <- data
}
}
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = tail(data)$V1
}
#function to plot k versus min value given an interval (function goes in graph)
k_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(k, min, color = f, group = means$f))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .7,method = 'lm')+
geom_hline(yintercept = ablines[f_interval], color = "red")+
theme(legend.position="none")
p10$labels$colour <- "Function"
p10$labels$title <- paste("Function",f_interval,"with",dim,"dimensions")
grid.arrange(arrangeGrob(p10+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value", rot = 90),
bottom = textGrob("Tournament size")
)
)
}
# k_min_plot(means10, means20, means40, f_interval = c(1))
#function to plot f versus min value given an interval (k goes in graph)
f_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(f, min, color = k, group = means$k))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .3,method = 'lm')+
p10$labels$title <- paste("Function",f_interval,"with",dim,"dimensions")
p10$labels$colour <- "Tour. size"
p10$labels$title <- paste("Function",f_interval,dim,"dimensions")
grid.arrange(arrangeGrob(p10+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob(" Tournament size"),
bottom = textGrob("Function")))
}
# processing data
## getting data of only the last gen
# ddd10 <- loadDimension(10)
ddd20 <- loadDimension(20)
save(ddd20, file = "ddd20.RData")
group <- as.data.table(ddd20)
ddd20 <- group[group[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
means20 <- aggregate(ddd20, list(k = ddd20$k, f = ddd20$f), mean)
means20 <- as.data.table(means20)
unique(means20_sbx$rep)
unique(means20$rep)
ddd20_sbx <- loadDimension(20)
save(ddd20_sbx, file = "ddd20-sbx.RData")
group <- as.data.table(ddd20)
ddd20 <- group[group[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
means20 <- aggregate(ddd20, list(k = ddd20$k, f = ddd20$f), mean)
means20 <- as.data.table(means20)
unique(means20_sbx$rep)
group <- as.data.table(ddd20)
group_sbx <- as.data.table(ddd20_sbx)
ddd20_sbx <- group[group[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
means20_sbx <- aggregate(ddd20, list(k = ddd20$k, f = ddd20$f), mean)
means20_sbx <- as.data.table(means20)
load("ddd40-sbx.RData")
group_sbx <- as.data.table(ddd20_sbx)
ddd20_sbx <- group_sbx[group_sbx[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
load("ddd20.RData")
group_sbx <- as.data.table(ddd20_sbx)
ddd20_sbx <- group_sbx[group_sbx[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
means20_sbx <- aggregate(ddd20_sbx, list(k = ddd20_sbx$k, f = ddd20_sbx$f), mean)
means20_sbx <- as.data.table(means20)
unique(means20_sbx$rep)
subset(means20_sbx, rep == '19')
head(means20_sbx)
loadDimension <- function(dim){
workdir <- paste0("results_UniformGaussian",dim,"D/")
ddd <- NULL
for (j in 2:24) {
dd <- NULL
for (i in 2:30) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
loadDimension <- function(dim){
workdir <- paste0("results_SBX",dim,"D/")
ddd <- NULL
for (j in 2:24) {
dd <- NULL
for (i in 2:30) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
ddd20_sbx <- loadDimension(20)
i=2
i=10
j=4
dim=20
workdir <- paste0("results_SBX",dim,"D/")
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
tail(d)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
dd <- NULL
dd <- rbind(dd,d)
head(dd)
tail(dd)
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
ddd <- NULL
ddd <- rbind(ddd,dd)
head(ddd)
tail(ddd)
loadDimension <- function(dim){
workdir <- paste0("results_SBX",dim,"D/")
ddd <- NULL
for (j in 2:24) {
dd <- NULL
for (i in 2:24) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
ddd20_sbx <- loadDimension(20)
save(ddd20_sbx, file = "ddd20-sbx.RData")
head(ddd20_sbx)
tail(ddd20_sbx)
group_sbx <- as.data.table(ddd20_sbx)
head(group_sbx)
tail(group_sbx)
ddd20_sbx <- group_sbx[group_sbx[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
head(ddd20_sbx)
tail(ddd20_sbx)
unique(means20_sbx$rep)
means20_sbx <- aggregate(ddd20_sbx, list(k = ddd20_sbx$k, f = ddd20_sbx$f), mean)
unique(means20_sbx$rep)
gead(means20_sbx)
head(means20_sbx)
tail(means20_sbx)
load("ddd20.RData")
group <- as.data.table(ddd20)
ddd20 <- group[group[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
tail(ddd20)
means20 <- aggregate(ddd20, list(k = ddd20$k, f = ddd20$f), mean)
means20 <- as.data.table(means20)
unique(means20$rep)
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot.R')
unique(means20_sbx$rep)
unique(means20$rep)
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-sbx.R')
source('dataPlot-sbx.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-sbx.R')
unique(means20_sbx$rep)
subset(means20_sbx, rep == '19')
means20_sbx
means40_sbx
group_sbx
group_sbx$V1
unique(group_sbx$rep)
load("ddd20.RData")
group <- as.data.table(ddd20)
ddd20 <- group[group[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
tail(ddd20)
means20 <- aggregate(ddd20, list(k = ddd20$k, f = ddd20$f), mean)
tail(means20)
load("ddd40.RData")
group <- as.data.table(ddd40)
ddd40 <- group[group[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
means40 <- aggregate(ddd40, list(k = ddd40$k, f = ddd40$f), mean)
means40 <- as.data.table(means40)
tail(means40)
means40 <- aggregate(ddd40, list(k = ddd40$k, f = ddd40$f), mean)
tail(means40)
tail(ddd40)
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-sbx.R')
setwd("~/Documents/estudos/gaParameterAnalysis/data/")
library(rcompanion)
unimodal20 <- means20[f %in% c(f_interval)]
f_interval=c(2,5,6,7,8,9,10,11,12,13,14)
unimodal20 <- means20[f %in% c(f_interval)]
unimodal20_sbx <- means20_sbx[f %in% c(f_interval)]
unimodal40 <- means40[f %in% c(f_interval)]
unimodal40_sbx <- means40_sbx[f %in% c(f_interval)]
f_interval=c(3,4,15,16,17,18,19,20,21,22,23,24)
multimodal20 <- means20[f %in% c(f_interval)]
multimodal20_sbx <- means20_sbx[f %in% c(f_interval)]
multimodal40 <- means40[f %in% c(f_interval)]
multimodal40_sbx <- means40_sbx[f %in% c(f_interval)]
friedman.test(min ~ k | f, data = unimodal20)
friedman.test(min ~ k | f, data = multimodal20)
friedman.test(min ~ k | f, data = means20)
friedman.test(min ~ k | f, data = unimodal40)
friedman.test(min ~ k | f, data = multimodal40)
friedman.test(min ~ k | f, data = means40)
friedman.test(min ~ k | f, data = unimodal20_sbx)
friedman.test(min ~ k | f, data = multimodal20_sbx)
friedman.test(min ~ k | f, data = means20_sbx)
friedman.test(min ~ k | f, data = unimodal40_sbx)
friedman.test(min ~ k | f, data = multimodal40_sbx)
friedman.test(min ~ k | f, data = means40_sbx)
## Uniform - 20D
for (i in c(2:24)){
png(file = paste0("../graphs/f",  i,"_dim_20.png"), 480, 480)
k_min_plot(means20, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_",  i,"_dim_20.png"), 480, 480)
k_min_plot(unimodal20, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_",  i,"_dim_20.png"), 480, 480)
k_min_plot(multimodal20, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
## Uniform - 40D
for (i in c(2:24)){
png(file = paste0("../graphs/f",  i,"_dim_40.png"), 480, 480)
k_min_plot(means40, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_",  i,"_dim_40.png"), 480, 480)
k_min_plot(unimodal40, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_",  i,"_dim_40.png"), 480, 480)
k_min_plot(multimodal40, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
##SBX - 20D
for (i in c(2:24)){
png(file = paste0("../graphs/f_sbx_",  i,"_dim_20.png"), 480, 480)
k_min_plot(means20_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_sbx_",  i,"_dim_40.png"), 480, 480)
k_min_plot(unimodal20_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_sbx_",  i,"_dim_20.png"), 480, 480)
k_min_plot(multimodal20_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
##SBX - 40D
for (i in c(2:24)){
png(file = paste0("../graphs/f_sbx_",  i,"_dim_40.png"), 480, 480)
k_min_plot(means40_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_sbx_",  i,"_dim_40.png"), 480, 480)
k_min_plot(unimodal40_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_sbx_",  i,"_dim_40.png"), 480, 480)
k_min_plot(multimodal40_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
## Uniform - 20D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f",  i,"_dim_20.png"), 480, 480)
#   k_min_plot(means20, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_uniform_",  i,"_dim_20.png"), 480, 480)
k_min_plot(unimodal20, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_uniform_",  i,"_dim_20.png"), 480, 480)
k_min_plot(multimodal20, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
## Uniform - 40D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f",  i,"_dim_40.png"), 480, 480)
#   k_min_plot(means40, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_uniform_",  i,"_dim_40.png"), 480, 480)
k_min_plot(unimodal40, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_uniform_",  i,"_dim_40.png"), 480, 480)
k_min_plot(multimodal40, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
##SBX - 20D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f_sbx_",  i,"_dim_20.png"), 480, 480)
#   k_min_plot(means20_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_sbx_",  i,"_dim_20.png"), 480, 480)
k_min_plot(unimodal20_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_sbx_",  i,"_dim_20.png"), 480, 480)
k_min_plot(multimodal20_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
##SBX - 40D
# for (i in c(2:24)){
#   png(file = paste0("../graphs/f_sbx_",  i,"_dim_40.png"), 480, 480)
#   k_min_plot(means40_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
#   dev.off()
# }
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_sbx_",  i,"_dim_40.png"), 480, 480)
k_min_plot(unimodal40_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_sbx_",  i,"_dim_40.png"), 480, 480)
k_min_plot(multimodal40_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
friedman.test(min ~ k | f, data = means20)
friedman.test(min ~ k | f, data = means40)
friedman.test(min ~ k | f, data = means40_sbx)
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_sbx_",  i,"_dim_20.png"), 480, 480)
k_min_plot(unimodal20_sbx, k_interval = NULL, f_interval = c(i), dim = 20)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_sbx_",  i,"_dim_20.png"), 480, 480)
k_min_plot(multimodal20_sbx, k_interval = NULL, f_interval = c(i), dim = 20)
dev.off()
}
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_sbx_",  i,"_dim_40.png"), 480, 480)
k_min_plot(unimodal40_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_sbx_",  i,"_dim_40.png"), 480, 480)
k_min_plot(multimodal40_sbx, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
multimodal40_sbx <- means40_sbx[f %in% c(f_interval)]
friedman.test(min ~ k | f, data = means40)
friedman.test(min ~ k | f, data = means40_sbx)
friedman.test(min ~ k | f, data = multimodal40_sbx)
friedman.test(min ~ k | f, data = unimodal40_sbx)
friedman.test(min ~ k | f, data = unimodal40)
friedman.test(min ~ k | f, data = multimodal40)
min(means40$mean)
min(means40_sbx$mean)
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_uniform_",  i,"_dim_40.png"), 480, 480)
k_min_plot(multimodal40, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
friedman.test(min ~ k | f, data = means40)
