testing = concrete[-inTrain,]
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3525)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
confusionMatrix(pred_svm, testing$CompressiveStrength)
set.seed(2357) #set seeding with the first 3 primes - because of reasons
functions <- sample(1:24, 4, replace=T)
set.seed(2357)
dimensions <- sample(c(10,20,40), 4, replace=T)
set.seed(2357)
tournamentsize <- sample(2:24, $, replace=T)
set.seed(2357)
gen_scheme <- c("lambda, lambda", "lambda + lambda")
set.seed(2357)
scheme <- sample(gen_scheme, 4, replace=T)
set.seed(2357) #set seeding with the first 3 primes - because of reasons
functions <- sample(1:24, 4, replace=T)
set.seed(2357)
dimensions <- sample(c(10,20,40), 4, replace=T)
set.seed(2357)
tournamentsize <- sample(2:24, 4, replace=T)
set.seed(2357)
gen_scheme <- c("lambda, lambda", "lambda + lambda")
set.seed(2357)
scheme <- sample(gen_scheme, 4, replace=T)
functions
dimensions
tournamentsize
scheme
dimensions <- sample(c(10,20,40), 3, replace=T)# let las
dimensions
set.seed(2357)
dimensions <- sample(c(10,20,40), 3, replace=T)
dimensions
type(dimensions)
class(dimensions)
typeof(dimensions)
dimensions[4] <- 40
dimensions
?plotly
require{ploty}
require(plotly)
?plotly
setwd("~/Documents/estudos/gaParameterAnalysis/data")
library(knitr)
library(ggplot2)
library(gridExtra)
require(data.table)
names = c("SphereF. ", "Ellipsoidal F.", "Rastrigin F.",
"Buche-Rastrigin F.", "Linear Slope",
"Attractive Sector F.", "Step Ellipsoidal F.",
"Rosenbrock F.", "Rosenbrock F. Rotated",
"Ellipsoidal F.", "Discus F.", "Bent Cigar F.",
"Sharp Ridge F.", "Different Powers F.",
"Rastrigin F.", "Weierstrass F.",
"Schaffers F7 F.",
"Schaffers F7 F. moderately ill-conditioned",
"Composite Griwank-Rosenbrock F. F8F2",
"Schwefel F.", "Gallagher's Gaussian 101-me Peaks F.",
"Gallagher's Gaussian 21-hi Peaks F.", "Katsuura F.",
"Lunacek bi-Rastrigin F.")
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = round(tail(data)$V1, 2)
}
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
p1 <- (p1+ theme(legend.position="none"))
aux <- ggploty(p1)
return(aux)
}
# SBX
load("ddd40-sbx.RData")
sbx_40 <- as.data.table(ddd40_sbx)
plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
require(plotly)
setwd("~/Documents/estudos/gaParameterAnalysis/data")
library(knitr)
library(ggplot2)
library(gridExtra)
require(data.table)
names = c("SphereF. ", "Ellipsoidal F.", "Rastrigin F.",
"Buche-Rastrigin F.", "Linear Slope",
"Attractive Sector F.", "Step Ellipsoidal F.",
"Rosenbrock F.", "Rosenbrock F. Rotated",
"Ellipsoidal F.", "Discus F.", "Bent Cigar F.",
"Sharp Ridge F.", "Different Powers F.",
"Rastrigin F.", "Weierstrass F.",
"Schaffers F7 F.",
"Schaffers F7 F. moderately ill-conditioned",
"Composite Griwank-Rosenbrock F. F8F2",
"Schwefel F.", "Gallagher's Gaussian 101-me Peaks F.",
"Gallagher's Gaussian 21-hi Peaks F.", "Katsuura F.",
"Lunacek bi-Rastrigin F.")
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = round(tail(data)$V1, 2)
}
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
p1 <- (p1+ theme(legend.position="none"))
aux <- ggploty(p1)
return(aux)
}
# SBX
load("ddd40-sbx.RData")
sbx_40 <- as.data.table(ddd40_sbx)
plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
knitr::opts_chunk$set(echo = FALSE)
require(plotly)
setwd("~/Documents/estudos/gaParameterAnalysis/data")
library(knitr)
library(ggplot2)
library(gridExtra)
require(data.table)
names = c("SphereF. ", "Ellipsoidal F.", "Rastrigin F.",
"Buche-Rastrigin F.", "Linear Slope",
"Attractive Sector F.", "Step Ellipsoidal F.",
"Rosenbrock F.", "Rosenbrock F. Rotated",
"Ellipsoidal F.", "Discus F.", "Bent Cigar F.",
"Sharp Ridge F.", "Different Powers F.",
"Rastrigin F.", "Weierstrass F.",
"Schaffers F7 F.",
"Schaffers F7 F. moderately ill-conditioned",
"Composite Griwank-Rosenbrock F. F8F2",
"Schwefel F.", "Gallagher's Gaussian 101-me Peaks F.",
"Gallagher's Gaussian 21-hi Peaks F.", "Katsuura F.",
"Lunacek bi-Rastrigin F.")
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = round(tail(data)$V1, 2)
}
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
p1 <- (p1+ theme(legend.position="none"))
aux <- ggplotly(p1)
return(aux)
}
# SBX
load("ddd40-sbx.RData")
sbx_40 <- as.data.table(ddd40_sbx)
plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
setwd("~/Documents/estudos/gaParameterAnalysis/data")
library(knitr)
library(ggplot2)
library(gridExtra)
require(data.table)
names = c("SphereF. ", "Ellipsoidal F.", "Rastrigin F.",
"Buche-Rastrigin F.", "Linear Slope",
"Attractive Sector F.", "Step Ellipsoidal F.",
"Rosenbrock F.", "Rosenbrock F. Rotated",
"Ellipsoidal F.", "Discus F.", "Bent Cigar F.",
"Sharp Ridge F.", "Different Powers F.",
"Rastrigin F.", "Weierstrass F.",
"Schaffers F7 F.",
"Schaffers F7 F. moderately ill-conditioned",
"Composite Griwank-Rosenbrock F. F8F2",
"Schwefel F.", "Gallagher's Gaussian 101-me Peaks F.",
"Gallagher's Gaussian 21-hi Peaks F.", "Katsuura F.",
"Lunacek bi-Rastrigin F.")
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = round(tail(data)$V1, 2)
}
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
p1 <- (p1+ theme(legend.position="none"))
return(p1)
}
# SBX
load("ddd40-sbx.RData")
sbx_40 <- as.data.table(ddd40_sbx)
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
aux
ggplotly(aux)
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
# ylab('Function Mean Value') +
# theme(plot.title = element_text(size=18))+
# theme(axis.title=element_text(size=16))
p1 <- (p1+ theme(legend.position="none"))
return(p1)
}
sbx_40 <- as.data.table(ddd40_sbx)
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation')# +
# ylab('Function Mean Value') +
# theme(plot.title = element_text(size=18))+
# theme(axis.title=element_text(size=16))
p1 <- (p1+ theme(legend.position="none"))
return(p1)
}
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
ggplotly(aux)
levels(aux)
levels(aux[2])
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation')# +
# ylab('Function Mean Value') +
# theme(plot.title = element_text(size=18))+
# theme(axis.title=element_text(size=16))
# p1 <- (p1+ theme(legend.position="none"))
return(p1)
}
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
ggplotly(aux)
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() #+
# geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation')# +
# ylab('Function Mean Value') +
# theme(plot.title = element_text(size=18))+
# theme(axis.title=element_text(size=16))
# p1 <- (p1+ theme(legend.position="none"))
return(p1)
}
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
ggplotly(aux)
library(tidyverse)
library(plotly)
# Scatterplot
p=ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species, shape=Species)) +
geom_point(size=6, alpha=0.6)
p
ggplotly(p)
aux
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
p1 <- (p1+ theme(legend.position="none"))
return(p1)
}
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
aux
ggplotly(aux)
ggplotly(aux)
aux
ggplotly(aux)
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
p1 <- (p1+ theme(legend.position="none"))
gg <- ggplotly(p1)
}
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
# p1 <- (p1+ theme(legend.position="none"))
gg <- ggplotly(p1)
}
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
knitr::opts_chunk$set(echo = TRUE)
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
gg <- ggplotly(p1)
# print(p1+ theme(legend.position="none"))
}
aux <- plotforKGA(sbx_40, f_interval = c(11), algo = "SBX", dim = 40, tsize = 10)
aux
aux
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
gg <- ggplotly(p1)
# print(p1+ theme(legend.position="none"))
}
aux <- plotforKGA(sbx_40, f_interval = c(11), algo = "SBX", dim = 40, tsize = 10)
aux <- plotforKGA(sbx_40, f_interval = c(11), algo = "SBX", dim = 40, tsize = 10)
aux
aux
aux
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 15)
aux <- plotforKGA(sbx_40, f_interval = c(21), algo = "SBX", dim = 40, tsize = 10)
aux <- plotforKGA(sbx_40, f_interval = 21, algo = "SBX", dim = 40, tsize = 10)
data <- sbx-4)
data <- sbx_40
f_interval = 21
tsize = 10
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
aux
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
mni
min
plot_d <- data.frame(min)
plot_d
plot_d
plot(plot_d)
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
p1
gg <- ggplotly(p1)
levels(p1)
levels(min)
p1
str(p1)
plot_d
levels(plot_d)
factor(plot_d)
summary(plot_d)
factor(min)
unique(factor(min))
sum(unique(factor(min))==0)
sum(unique(factor(min))==1)
unique(factor(min))
sum(unique(factor(min)))
count(unique(factor(min)))
min[unique(factor(min)),]
min[unique(factor(min))]
sum(min[unique(factor(min))])
sum(min[,unique(factor(min))])
min[,unique(factor(min))]
unique(factor(min))
levels(unique(factor(min))
)
which(unique(factor(min)))
length(unique(factor(min)))
dim(min)
length(min)
f_interval=11
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
length(unique(factor(min)))
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(min)
p1<- ggplot(unique(factor(plot_d)), aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
gg <- ggplotly(p1)
# print(p1+ theme(legend.position="none"))
}
aux <- plotforKGA(sbx_40, f_interval = 21, algo = "SBX", dim = 40, tsize = 10)
plotforKGA = function(data, f_interval, algo, dim, tsize){
aux <- data[f %in% c(f_interval)]
aux <- aux[k %in% c(tsize)]
min = tapply(aux$min, INDEX = aux$gen, FUN = mean)
plot_d <- data.frame(unique(factor(min)))
p1<- ggplot(plot_d, aes(min(aux$gen):max(aux$gen), min, colour=min)) +
geom_line() +
geom_point() +
geom_hline(yintercept=ablines[f_interval], linetype="dotted", color = "red")+
xlab('Generation') +
ylab('Function Mean Value') +
theme(plot.title = element_text(size=18))+
theme(axis.title=element_text(size=16))
gg <- ggplotly(p1)
# print(p1+ theme(legend.position="none"))
}
aux <- plotforKGA(sbx_40, f_interval = 21, algo = "SBX", dim = 40, tsize = 10)
unique(factor(min))
as.numeric(unique(factor(min)))
unique(factor(min))
