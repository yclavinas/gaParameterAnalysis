x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(Ëœ)
lm(x~y)
t.test(lm(x~y))
out <- lm(x~y)
out
summary(out)
0.2038^2
require(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parents -1, galton)
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm (Volume ~Girth + Height + Constatnt -1, trees)
fit <- lm (Volume ~Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~Height + Constant -1, tress2)
fit2 <- lm(Volume ~Height + Constant -1 , trees2)
lapply(list(fit, fit2), coef)
all <- (Fertility ~ ., swiss)
all <- (Fertility ~ ".", swiss)
all <- (Fertility ~ Agriculture, Examination, Education, Catholic, Infant.Mortality, swiss)
all <- (Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, swiss)
all <- (Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data =swiss)
all <- (Fertility ~ Agriculture, swiss)
all <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data =swiss)
summuary(all)
summary(all)
(Fertility ~ Agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summaru(lm(Fertility ~ Agriculture, swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination ~ Education, swiss)
cor(Examination ~ Education)
cor(swiss$Examination ~ swiss$Education)
cor(swiss$Examination, swiss$Education)
cor(Agriculture ~ Education, swiss)
cor(Agriculture, Education, swiss)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit$coefficients - all$coefficients
all$coefficients - efit$coefficients
require(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays, class)
.class(InsectSprays)
class(InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(fit)$coef
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, spray2)
head(spray2)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[3] - fit$coef[2])/1.6011
(fit$coef[2] - fit$coef[3])/1.6011
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
influence.measures(lm(y ~ x))
lm(y ~ x)
require(swirl)
swirl(())
swirl(
)
dim(hunger)
948
names(hunger)
fit <- lm(hunger ~ year)
fit <- lm(X ~ year, hunger)
fit <- lm(X ~ Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF lm(Numeric[hunger$Sex=="Female"] ~ Years[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Years[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
dim(hunger)
948
names(hunger)
fit <- lm(numeric ~ Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
kmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
lmBoth
summary(lmBoth)
lmYear <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
lmInter <- lm(Numeric ~ Year + Sex + Year*Sex, hunger)
summary(lmInter)
swirl()
fit <- lm (y ~ x, out2)
plot(fit, which = 1)
fitno <- out2[-1,]
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which = 1)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- <- out2[1, "y"] - predict(fitno, out2[1,])
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
head(hatvalues(fit))
head(hatvalues(fit))
?hatvalues
sigma <- sqrt(deviance(fit)/df.residual(fit))
sigma*sqrt(1-hatvalues(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd,
| rstandard(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
\
sigma1 <-
sqrt(deviance(fitno)/residuals(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitmo, out2) from- predict(fit, out2)
dy <- predict(fitmo, out2) - predict(fit, out2)
dy <- predict(fitno, out2) - predict(fit, out2)
dy/sigma^2
sum(dy^2)/(2*sigma^2)
cooks.distance(fit)[1]
plot(fit, which = 5)
require(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ . , data = swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture, Education, Catholic, Infant.Mortality, data = swiss)
mdl2 <- lm(Fertility ~ Agriculture, Education, Catholic, Infant.Mortality, data = swiss)
mdl2 <- lm(swiss$Fertility ~ swiss$Agriculture, swiss$Education, swiss$Catholic, swiss$Infant.Mortality)
mdl2 <- lm(Fertility ~ Agriculture, Education, Catholic, data = swiss)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture, Examination, Education, swiss)
fit3 <- lm(Fertility ~ Agriculture, Examination, Education, swiss)
fit3 <- lm(Fertility ~ c(Agriculture, Examination, Education), swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ddd40_2n2n <- loadDimension(40)
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/gaParameterAnalysis/data")
# load data
loadDimension <- function(dim){
workdir <- paste0("2n-2n-sbx-",dim,"D/")
ddd <- NULL
for (j in 2:24) {
dd <- NULL
for (i in 2:24) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
k_subsetting <- function(data, k_interval = NULL){
if (!is.null(k_interval)){
data <- data[k %in% c(k_interval)]
}
else{
data <- data
}
}
f_subsetting <- function(data, f_interval = NULL){
if (!is.null(f_interval)){
data <- data[f %in% c(f_interval)]
}
else{
data <- data
}
}
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = tail(data)$V1
}
#function to plot k versus min value given an interval (function goes in graph)
k_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(k, min, color = f, group = means$f))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .7,method = 'lm')+
geom_hline(yintercept = ablines[f_interval], color = "red")+
theme(legend.position="none")
p10$labels$colour <- "Function"
p10$labels$title <- paste("Function",f_interval,"with",dim,"dimensions")
grid.arrange(arrangeGrob(p10+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value", rot = 90),
bottom = textGrob("Tournament size")
)
)
}
# k_min_plot(means10, means20, means40, f_interval = c(1))
#function to plot f versus min value given an interval (k goes in graph)
f_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(f, min, color = k, group = means$k))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .3,method = 'lm')+
p10$labels$title <- paste("Function",f_interval,"with",dim,"dimensions")
p10$labels$colour <- "Tour. size"
p10$labels$title <- paste("Function",f_interval,dim,"dimensions")
grid.arrange(arrangeGrob(p10+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob(" Tournament size"),
bottom = textGrob("Function")))
}
# processing data
## getting data of only the last gen
# ddd10_sbx <- loadDimension(10)
# ddd20_sbx <- loadDimension(20)
# save(ddd20_2n2n, file = "ddd20-sbx.RData")
ddd40_2n2n <- loadDimension(40)
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/gaParameterAnalysis/data")
# load data
loadDimension <- function(dim){
workdir <- paste0("2n-2n-sbx-",dim,"D/")
ddd <- NULL
for (j in 2:24) {
dd <- NULL
for (i in 2:24) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
k_subsetting <- function(data, k_interval = NULL){
if (!is.null(k_interval)){
data <- data[k %in% c(k_interval)]
}
else{
data <- data
}
}
f_subsetting <- function(data, f_interval = NULL){
if (!is.null(f_interval)){
data <- data[f %in% c(f_interval)]
}
else{
data <- data
}
}
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = tail(data)$V1
}
#function to plot k versus min value given an interval (function goes in graph)
k_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(k, min, color = f, group = means$f))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .7,method = 'lm')+
geom_hline(yintercept = ablines[f_interval], color = "red")+
theme(legend.position="none")
p10$labels$colour <- "Function"
p10$labels$title <- paste("Function",f_interval,"with",dim,"dimensions")
grid.arrange(arrangeGrob(p10+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value", rot = 90),
bottom = textGrob("Tournament size")
)
)
}
# k_min_plot(means10, means20, means40, f_interval = c(1))
#function to plot f versus min value given an interval (k goes in graph)
f_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(f, min, color = k, group = means$k))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .3,method = 'lm')+
p10$labels$title <- paste("Function",f_interval,"with",dim,"dimensions")
p10$labels$colour <- "Tour. size"
p10$labels$title <- paste("Function",f_interval,dim,"dimensions")
grid.arrange(arrangeGrob(p10+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob(" Tournament size"),
bottom = textGrob("Function")))
}
# processing data
## getting data of only the last gen
# ddd10_sbx <- loadDimension(10)
# ddd20_sbx <- loadDimension(20)
# save(ddd20_2n2n, file = "ddd20-sbx.RData")
ddd40_2n2n <- loadDimension(40)
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/gaParameterAnalysis/data")
# load data
loadDimension <- function(dim){
workdir <- paste0("results-2n-2n-sbx-",dim,"D/")
ddd <- NULL
for (j in 2:24) {
dd <- NULL
for (i in 2:24) {
d <- read.csv(paste0(workdir,"f",j,"_",i,".txt"),header = FALSE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
k_subsetting <- function(data, k_interval = NULL){
if (!is.null(k_interval)){
data <- data[k %in% c(k_interval)]
}
else{
data <- data
}
}
f_subsetting <- function(data, f_interval = NULL){
if (!is.null(f_interval)){
data <- data[f %in% c(f_interval)]
}
else{
data <- data
}
}
ablines = c(1:24)
for (i in 1:24){
workdir <- paste0("targets/")
data <- read.csv(paste0(workdir,"target_f",i,"_dim_40_tournsize_2.txt"),header = FALSE)
ablines[i] = tail(data)$V1
}
#function to plot k versus min value given an interval (function goes in graph)
k_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(k, min, color = f, group = means$f))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .7,method = 'lm')+
geom_hline(yintercept = ablines[f_interval], color = "red")+
theme(legend.position="none")
p10$labels$colour <- "Function"
p10$labels$title <- paste("Function",f_interval,"with",dim,"dimensions")
grid.arrange(arrangeGrob(p10+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value", rot = 90),
bottom = textGrob("Tournament size")
)
)
}
# k_min_plot(means10, means20, means40, f_interval = c(1))
#function to plot f versus min value given an interval (k goes in graph)
f_min_plot <- function(data, k_interval = NULL, f_interval = NULL, dim = NULL){
means <- k_subsetting(data, k_interval)
means <- f_subsetting(means, f_interval)
p10<- ggplot(means, aes(f, min, color = k, group = means$k))+
geom_point(col = 'red')+
geom_line()+
geom_smooth(alpha  = .3,method = 'lm')+
p10$labels$title <- paste("Function",f_interval,"with",dim,"dimensions")
p10$labels$colour <- "Tour. size"
p10$labels$title <- paste("Function",f_interval,dim,"dimensions")
grid.arrange(arrangeGrob(p10+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
nrow=1,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob(" Tournament size"),
bottom = textGrob("Function")))
}
# processing data
## getting data of only the last gen
# ddd10_sbx <- loadDimension(10)
# ddd20_sbx <- loadDimension(20)
# save(ddd20_2n2n, file = "ddd20-sbx.RData")
ddd40_2n2n <- loadDimension(40)
save(ddd40_2n2n, file = "ddd40-sbx.RData")
group_sbx <- as.data.table(ddd40_sbx)
ddd40_sbx <- group_sbx[group_sbx[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
group_2n2n <- as.data.table(ddd40_2n2n)
ddd40_2n2n <- group_2n2n[group_2n2n[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
means40_2n2n <- aggregate(ddd40_2n2n, list(k = ddd40_2n2n$k, f = ddd40_2n2n$f), mean)
means40_2n2n <- as.data.table(means40_2n2n)
unique(means40_2n2n$rep)
save(ddd40_2n2n, file = "ddd40-2n2n.RData")
ddd40_sbx <- loadDimension(40)
save(ddd40_sbx, file = "ddd40-sbx.RData")
source('dataPlot-2n2n.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-2n2n.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-2n2n.R')
source('~/dataplot-2n2n.R')
source('~/dataplot-2n2n.R')
setwd("~/Documents/estudos/gaParameterAnalysis/gaBenchmarksStudy")
source('dataPlot-2n2n.R')
setwd("~/Documents/estudos/gaParameterAnalysis/data/")
library(rcompanion)
f_interval=c(2,5,6,7,8,9,10,11,12,13,14)
unimodal40_2n2n <- means40_2n2n[f %in% c(f_interval)]
multimodal40_2n2n <- means40_2n2n[f %in% c(f_interval)]
friedman.test(min ~ k | f, data = unimodal40_2n2n)
friedman.test(min ~ k | f, data = multimodal40_2n2n)
friedman.test(min ~ k | f, data = means40_2n2n)
f_interval=c(3,4,15,16,17,18,19,20,21,22,23,24)
multimodal40_2n2n <- means40_2n2n[f %in% c(f_interval)]
friedman.test(min ~ k | f, data = unimodal40_2n2n)
friedman.test(min ~ k | f, data = multimodal40_2n2n)
friedman.test(min ~ k | f, data = means40_2n2n)
for (i in c(2,5,6,7,8,9,10,11,12,13,14)){
png(file = paste0("../graphs/unimodal_2n2n_",  i,"_dim_40.png"), 480, 480)
k_min_plot(unimodal40_2n2n, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
for (i in c(3,4,15,16,17,18,19,20,21,22,23,24)){
png(file = paste0("../graphs/multimodal_2n2n_",  i,"_dim_40.png"), 480, 480)
k_min_plot(multimodal40_2n2n, k_interval = NULL, f_interval = c(i), dim = 40)
dev.off()
}
