#         ylab('function mean value') +
#         ggtitle(paste("GAModel",' means and std' , sep=''))
#     print(p1+ theme(legend.position="none"))
#
#     p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
#         # geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('tournament size') +
#         ylab('function mean value') +
#         ggtitle(paste("GA",' means and C.I.' , sep='')) +
#         geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
#     print(p1+ theme(legend.position="none"))
# }
# findMaxPosGA()
# create function to find the mean of the 40 execs
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else{
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
# mean=createMeanFromExecBenchmarks('F1_2', 0)
# create function to find the max value from a function - the mean of the last gen that counts
# here im getting the values from the tournsize
findMaxBenchmarks = function(benchmarck_index_function){
df<-data.frame()
for (i in 2:25){
name_function=paste('F',benchmarck_index_function,'_',i,sep='')
aux<-createMeanFromExecBenchmarks(name_function, benchmarck_index_function)
df<-rbind(df, aux)
}
return(df)
}
# create function to find the max value and where it is located
findMaxPosBenchmarks = function (benchmarck_index_function){
vectorAuxMax=findMaxBenchmarks(benchmarck_index_function)
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and std' , sep=''))
print(p1+ theme(legend.position="none"))
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
# geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and C.I.' , sep='')) +
geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
print(p1+ theme(legend.position="none"))
}
for (i in 1:24){
findMaxPosBenchmarks(i)
}
require("knitr")
knitr::opts_knit$set(root.dir = "~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/UniformGaussian20D")
knitr::opts_chunk$set(fig.pos = 'H')
knitr::opts_chunk$set(cache=TRUE)
library(ggplot2)
library(gridExtra)
par(mfrow=c(2,1))
# #create function to read data with paste - header problems - GA
# loadDataGA_2_10 = function(type, i,  nrows = 500){
#     filename = paste(type,'_',i,'.txt',sep='')
#     data = read.csv(file = filename, header = T, nrows = 200, sep = '\t', skip=1,  nrows = nrows)
#     return(data)
# }
#
# # create function to read data with paste - header problems - GA
# loadDataGA_11_25 = function(type, i,  nrows = 500){
#     filename = paste(type,'_',i,'.txt',sep='')
#     data = read.csv(file = filename, header = T, nrows = 200, sep = '\t', skip=3,  nrows = nrows)
#     return(data)
# }
#create function to read data with paste - benchmarks
loadDataBenchmarksF4_F24 = function(type, i,  nrows = 500, skip=2){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip=skip)
return(data)
}
loadDataBenchmarksF1_F3 = function(type, i,  nrows = 500, skip=0){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip = skip)
return(data)
}
# # create function to find the mean of the 40 execs
# createMeanFromExecGA = function (name_function, j){
#     vectorAuxMean = c(1:40)
#     for (i in 1:40) {
#         if (j == 2){
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         else if (j<=10) {
#             data=loadDataGA_2_10(name_function,i-1)
#         }
#         else{
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         vectorAuxMean[i] = data$max[500]
#     }
#     aux = t.test(vectorAuxMean)
#     df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
#     names(df) <- c('mean', 'std', 'five', 'ninetyFive')
#     return(df)
# }
#
#
# # create function to find the max value from a function - the mean of the last gen that counts
# # here im getting the values from the tournsize
# findMaxGA = function(){
#     df<-data.frame()
#     #TODO change from 24 to 25
#     for (i in 2:24){
#         name_function=paste('ga_',i,sep='')
#         aux<-createMeanFromExecGA(name_function, i)
#         df<-rbind(df, aux)
#     }
#     return(df)
# }
#
# # create function to find the max value and where it is located
# findMaxPosGA = function (){
#     vectorAuxMax=findMaxGA()
#     p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=1:nrow(vectorAuxMax))) +
#         geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('tournament size') +
#         ylab('function mean value') +
#         ggtitle(paste("GAModel",' means and std' , sep=''))
#     print(p1+ theme(legend.position="none"))
#
#     p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
#         # geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('tournament size') +
#         ylab('function mean value') +
#         ggtitle(paste("GA",' means and C.I.' , sep='')) +
#         geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
#     print(p1+ theme(legend.position="none"))
# }
# findMaxPosGA()
# create function to find the mean of the 40 execs
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else{
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
# mean=createMeanFromExecBenchmarks('F1_2', 0)
# create function to find the max value from a function - the mean of the last gen that counts
# here im getting the values from the tournsize
findMaxBenchmarks = function(benchmarck_index_function){
df<-data.frame()
for (i in 2:25){
name_function=paste('F',benchmarck_index_function,'_',i,sep='')
aux<-createMeanFromExecBenchmarks(name_function, benchmarck_index_function)
df<-rbind(df, aux)
}
return(df)
}
# create function to find the max value and where it is located
findMaxPosBenchmarks = function (benchmarck_index_function){
vectorAuxMax=findMaxBenchmarks(benchmarck_index_function)
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and std' , sep=''))
print(p1+ theme(legend.position="none"))
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
# geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and C.I.' , sep='')) +
geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
print(p1+ theme(legend.position="none"))
}
for (i in 1:24){
findMaxPosBenchmarks(i)
}
require("knitr")
knitr::opts_knit$set(root.dir = "~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/UniformGaussian20D")
knitr::opts_chunk$set(fig.pos = 'H')
knitr::opts_chunk$set(cache=TRUE)
library(ggplot2)
library(gridExtra)
par(mfrow=c(2,1))
# #create function to read data with paste - header problems - GA
# loadDataGA_2_10 = function(type, i,  nrows = 500){
#     filename = paste(type,'_',i,'.txt',sep='')
#     data = read.csv(file = filename, header = T, nrows = 200, sep = '\t', skip=1,  nrows = nrows)
#     return(data)
# }
#
# # create function to read data with paste - header problems - GA
# loadDataGA_11_25 = function(type, i,  nrows = 500){
#     filename = paste(type,'_',i,'.txt',sep='')
#     data = read.csv(file = filename, header = T, nrows = 200, sep = '\t', skip=3,  nrows = nrows)
#     return(data)
# }
#create function to read data with paste - benchmarks
loadDataBenchmarksF4_F24 = function(type, i,  nrows = 500, skip=2){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip=skip)
return(data)
}
loadDataBenchmarksF1_F3 = function(type, i,  nrows = 500, skip=0){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip = skip)
return(data)
}
# # create function to find the mean of the 40 execs
# createMeanFromExecGA = function (name_function, j){
#     vectorAuxMean = c(1:40)
#     for (i in 1:40) {
#         if (j == 2){
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         else if (j<=10) {
#             data=loadDataGA_2_10(name_function,i-1)
#         }
#         else{
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         vectorAuxMean[i] = data$max[500]
#     }
#     aux = t.test(vectorAuxMean)
#     df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
#     names(df) <- c('mean', 'std', 'five', 'ninetyFive')
#     return(df)
# }
#
#
# # create function to find the max value from a function - the mean of the last gen that counts
# # here im getting the values from the tournsize
# findMaxGA = function(){
#     df<-data.frame()
#     #TODO change from 24 to 25
#     for (i in 2:24){
#         name_function=paste('ga_',i,sep='')
#         aux<-createMeanFromExecGA(name_function, i)
#         df<-rbind(df, aux)
#     }
#     return(df)
# }
#
# # create function to find the max value and where it is located
# findMaxPosGA = function (){
#     vectorAuxMax=findMaxGA()
#     p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=1:nrow(vectorAuxMax))) +
#         geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('tournament size') +
#         ylab('function mean value') +
#         ggtitle(paste("GAModel",' means and std' , sep=''))
#     print(p1+ theme(legend.position="none"))
#
#     p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
#         # geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('tournament size') +
#         ylab('function mean value') +
#         ggtitle(paste("GA",' means and C.I.' , sep='')) +
#         geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
#     print(p1+ theme(legend.position="none"))
# }
# findMaxPosGA()
# create function to find the mean of the 40 execs
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else{
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
# mean=createMeanFromExecBenchmarks('F1_2', 0)
# create function to find the max value from a function - the mean of the last gen that counts
# here im getting the values from the tournsize
findMaxBenchmarks = function(benchmarck_index_function){
df<-data.frame()
for (i in 2:25){
name_function=paste('F',benchmarck_index_function,'_',i,sep='')
aux<-createMeanFromExecBenchmarks(name_function, benchmarck_index_function)
df<-rbind(df, aux)
}
return(df)
}
# create function to find the max value and where it is located
findMaxPosBenchmarks = function (benchmarck_index_function){
vectorAuxMax=findMaxBenchmarks(benchmarck_index_function)
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and std' , sep=''))
print(p1+ theme(legend.position="none"))
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
# geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and C.I.' , sep='')) +
geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
print(p1+ theme(legend.position="none"))
}
for (i in 1:24){
findMaxPosBenchmarks(i)
}
# #create function to read data with paste - header problems - GA
# loadDataGA_2_10 = function(type, i,  nrows = 500){
#     filename = paste(type,'_',i,'.txt',sep='')
#     data = read.csv(file = filename, header = T, nrows = 200, sep = '\t', skip=1,  nrows = nrows)
#     return(data)
# }
#
# # create function to read data with paste - header problems - GA
# loadDataGA_11_25 = function(type, i,  nrows = 500){
#     filename = paste(type,'_',i,'.txt',sep='')
#     data = read.csv(file = filename, header = T, nrows = 200, sep = '\t', skip=3,  nrows = nrows)
#     return(data)
# }
#create function to read data with paste - benchmarks
loadDataBenchmarksF4_F24 = function(type, i,  nrows = 500, skip=2){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip=skip)
return(data)
}
loadDataBenchmarksF1_F3 = function(type, i,  nrows = 500, skip=0){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip = skip)
return(data)
}
# # create function to find the mean of the 40 execs
# createMeanFromExecGA = function (name_function, j){
#     vectorAuxMean = c(1:40)
#     for (i in 1:40) {
#         if (j == 2){
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         else if (j<=10) {
#             data=loadDataGA_2_10(name_function,i-1)
#         }
#         else{
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         vectorAuxMean[i] = data$max[500]
#     }
#     aux = t.test(vectorAuxMean)
#     df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
#     names(df) <- c('mean', 'std', 'five', 'ninetyFive')
#     return(df)
# }
#
#
# # create function to find the max value from a function - the mean of the last gen that counts
# # here im getting the values from the tournsize
# findMaxGA = function(){
#     df<-data.frame()
#     #TODO change from 24 to 25
#     for (i in 2:24){
#         name_function=paste('ga_',i,sep='')
#         aux<-createMeanFromExecGA(name_function, i)
#         df<-rbind(df, aux)
#     }
#     return(df)
# }
#
# # create function to find the max value and where it is located
# findMaxPosGA = function (){
#     vectorAuxMax=findMaxGA()
#     p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=1:nrow(vectorAuxMax))) +
#         geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('tournament size') +
#         ylab('function mean value') +
#         ggtitle(paste("GAModel",' means and std' , sep=''))
#     print(p1+ theme(legend.position="none"))
#
#     p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
#         # geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('tournament size') +
#         ylab('function mean value') +
#         ggtitle(paste("GA",' means and C.I.' , sep='')) +
#         geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
#     print(p1+ theme(legend.position="none"))
# }
# findMaxPosGA()
# create function to find the mean of the 40 execs
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else if(j<19){
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
else{
data=loadDataBenchmarksF1_F3(name_function,i-1, skip = 0, nrows = 500)
}
vectorAuxMean[i] = data$min[500]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
# mean=createMeanFromExecBenchmarks('F1_2', 0)
# create function to find the max value from a function - the mean of the last gen that counts
# here im getting the values from the tournsize
findMaxBenchmarks = function(benchmarck_index_function){
df<-data.frame()
for (i in 2:25){
name_function=paste('F',benchmarck_index_function,'_',i,sep='')
aux<-createMeanFromExecBenchmarks(name_function, benchmarck_index_function)
df<-rbind(df, aux)
}
return(df)
}
# create function to find the max value and where it is located
findMaxPosBenchmarks = function (benchmarck_index_function){
vectorAuxMax=findMaxBenchmarks(benchmarck_index_function)
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and std' , sep=''))
print(p1+ theme(legend.position="none"))
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
# geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and C.I.' , sep='')) +
geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
print(p1+ theme(legend.position="none"))
}
findMaxPosBenchmarks(24)
findMaxPosBenchmarks(2)
findMaxPosBenchmarks(1)
sewd("~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/UniformGaussian20D"))
sewd("~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/UniformGaussian20D")
setwd("~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/UniformGaussian20D")
findMaxPosBenchmarks(2)
findMaxPosBenchmarks(24)
findMaxPosBenchmarks(22)
findMaxPosBenchmarks(23)
findMaxPosBenchmarks(21)
findMaxPosBenchmarks(20)
findMaxPosBenchmarks(19)
findMaxPosBenchmarks(20)
findMaxPosBenchmarks(23)
findMaxPosBenchmarks(24)
