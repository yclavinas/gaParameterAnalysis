output[i] = data
}
setwd("~/Documents/estudos/master-unb/earthquakemodels/code/R-files")
file = paste('dataConvervency4R_',i,'_2005',sep="")
output = c(rep(0,10))
for (i in 1:10){
#dataConvervency4R_5_2005
file = paste('dataConvervency4R_',i,'_2005',sep="")
data = read.csv2(file, sep='\t', header=T)
as.numeric(levels(data$std))[data$std]
data$std = as.numeric(levels(data$std))[data$std]
data$avg = as.numeric(levels(data$avg))[data$avg]
output[i] = data
}
i=0
file = paste('dataConvervency4R_',i,'_2005',sep="")
data = read.csv2(file, sep='\t', header=T)
as.numeric(levels(data$std))[data$std]
data$std = as.numeric(levels(data$std))[data$std]
data$avg = as.numeric(levels(data$avg))[data$avg]
output[i] = data
output[0]
output[i+1] = data
output[i+1] = data
outputic
i
output[i+1]
output[i+2]
output[i+3]
output[i+3]$avg=data$avg
output = c(rep(0,10))
output[i+3]$avg=data$avg
agvList = c(rep(0,10))
stdList = c(rep(0,10))
for (i in 0:9){
#dataConvervency4R_5_2005
file = paste('dataConvervency4R_',i,'_2005',sep="")
data = read.csv2(file, sep='\t', header=T)
data$std = as.numeric(levels(data$std))[data$std]
data$avg = as.numeric(levels(data$avg))[data$avg]
avgList[i+1] = data$avg
stdList[i+1] = data$std
}
agvgList = c(rep(0,10))
avgList = c(rep(0,10))
stdList = c(rep(0,10))
for (i in 0:9){
#dataConvervency4R_5_2005
file = paste('dataConvervency4R_',i,'_2005',sep="")
data = read.csv2(file, sep='\t', header=T)
data$std = as.numeric(levels(data$std))[data$std]
data$avg = as.numeric(levels(data$avg))[data$avg]
avgList[i+1] = data$avg
stdList[i+1] = data$std
}
i=0
file = paste('dataConvervency4R_',i,'_2005',sep="")
data = read.csv2(file, sep='\t', header=T)
data$std = as.numeric(levels(data$std))[data$std]
data$avg = as.numeric(levels(data$avg))[data$avg]
avgList[i+1] = data$avg
stdList[i+1] = data$std
avgList = c(rep(0,10))
stdList = c(rep(0,10))
avgList[i+1] = data$avg
i
avgList[i+1]
stdList
avgList = c(rep(0,10))
stdList = c(rep(0,10))
data = c(rep(0,10))
for (i in 0:9){
file = paste('dataConvervency4R_',i,'_2005',sep="")
data[i] = read.csv2(file, sep='\t', header=T)
datap[i]$std = as.numeric(levels(data[i]$std))[data[i]$std]
data[i]$avg = as.numeric(levels(data[i]$avg))[data[i]$avg]
avgList[i+1] = data$avg
stdList[i+1] = data$std
}
avgList = c(rep(0,10))
stdList = c(rep(0,10))
data = c(rep(0,10))
for (i in 0:9){
file = paste('dataConvervency4R_',i,'_2005',sep="")
data[i] = read.csv2(file, sep='\t', header=T)
datp[i]$std = as.numeric(levels(data[i]$std))[data[i]$std]
data[i]$avg = as.numeric(levels(data[i]$avg))[data[i]$avg]
avgList[i+1] = data$avg
stdList[i+1] = data$std
}
stdList = c(rep(0,10))
data = c(rep(0,10))
for (i in 0:9){
file = paste('dataConvervency4R_',i,'_2005',sep="")
data[i] = read.csv2(file, sep='\t', header=T)
data[i]$std = as.numeric(levels(data[i]$std))[data[i]$std]
data[i]$avg = as.numeric(levels(data[i]$avg))[data[i]$avg]
avgList[i+1] = data$avg
stdList[i+1] = data$std
}
data = c(rep(0,10))
for (i in 0:9){
file = paste('dataConvervency4R_',i,'_2005',sep="")
data[i] = read.csv2(file, sep='\t', header=T)
data[i]$std = as.numeric(levels(data[i]$std))[data[i]$std]
data[i]$avg = as.numeric(levels(data[i]$avg))[data[i]$avg]
# avgList[i+1] = data$avg
# stdList[i+1] = data$std
}
data = c(rep(0,10))
for (i in 0:9){
file = paste('dataConvervency4R_',i,'_2005',sep="")
data[i+1] = read.csv2(file, sep='\t', header=T)
data[i+1]$std = as.numeric(levels(data[i+1]$std))[data[i+1]$std]
data[i+1]$avg = as.numeric(levels(data[i+1]$avg))[data[i+1]$avg]
}
i=0
file = paste('dataConvervency4R_',i,'_2005',sep="")
data[i+1] = read.csv2(file, sep='\t', header=T)
data = c(rep(0,10))
file = paste('dataConvervency4R_',i,'_2005',sep="")
data[i+1] = read.csv2(file, sep='\t', header=T)
data
data = c(rep(0,10))
file = paste('dataConvervency4R_',i,'_2005',sep="")
data[i+1] = read.csv2(file, sep='\t', header=T)
data
data = c(rep(0,10))
data
file = paste('dataConvervency4R_',i,'_2005',sep="")
data2 = read.csv2(file, sep='\t', header=T)
data[i+1]$std = as.numeric(levels(data2$std))[data2$std]
data = c(rep(0,10))
file = paste('dataConvervency4R_',i,'_2005',sep="")
data2 = read.csv2(file, sep='\t', header=T)
data[i+1]$std = as.numeric(levels(data2$std))[data2$std]
i
data[0]
data[1]
data = c(rep(0,10))
data[0]
file = paste('dataConvervency4R_',i,'_2005',sep="")
data = read.csv2(file, sep='\t', header=T)
data$std = as.numeric(levels(data$std))[data$std]
data$avg = as.numeric(levels(data$avg))[data$avg]
data
file = paste('dataConvervency4R_',0,'_2005',sep="")
data1 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',1,'_2005',sep="")
data2 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',2,'_2005',sep="")
data3 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',3,'_2005',sep="")
data4 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',4,'_2005',sep="")
data5 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',5,'_2005',sep="")
data6 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',6,'_2005',sep="")
data7 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',7,'_2005',sep="")
data8 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',8,'_2005',sep="")
data9 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',9,'_2005',sep="")
data10 = read.csv2(file, sep='\t', header=T)
means = c(rep(0,length(data$avg)))
for (i in 1:length(data$avg)){
means[i] = (data1$avg[i] + data2$avg[i] + data3$avg[i] + data4$avg[i] + data5$avg[i] +
data6$avg[i] + data7$avg[i] + data8$avg[i] + data9$avg[i] + data10$avg[i])/10
}
file = paste('dataConvervency4R_',0,'_2005',sep="")
data1 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',1,'_2005',sep="")
data2 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',2,'_2005',sep="")
data3 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',3,'_2005',sep="")
data4 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',4,'_2005',sep="")
data5 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',5,'_2005',sep="")
data6 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',6,'_2005',sep="")
data7 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',7,'_2005',sep="")
data8 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',8,'_2005',sep="")
data9 = read.csv2(file, sep='\t', header=T)
file = paste('dataConvervency4R_',9,'_2005',sep="")
data10 = read.csv2(file, sep='\t', header=T)
means = c(rep(0,length(data$avg)))
means
i=0
i
i=1
means[i] = ((data1$avg[i] + data2$avg[i] + data3$avg[i] + data4$avg[i] + data5$avg[i] +
data6$avg[i] + data7$avg[i] + data8$avg[i] + data9$avg[i] + data10$avg[i])/10)
loadData = function(region, year, i){
# file = paste(region,year,".txt",sep="")
file = paste('dataConvervency4R_',region,'_',0,'_2005',sep="")
data = read.csv2(file, sep='\n', header=F)
data$std = as.numeric(levels(data$std))[data$std]
data$max = as.numeric(levels(data$max))[data$max]
return(data)
}
data2 = load('Kanto', 2005, 0)
region="Kanto"
year=2005
file = paste('dataConvervency4R_',region,'_',0,'_',year,sep="")
data = read.csv2(file, sep='\n', header=F)
data$std = as.numeric(levels(data$std))[data$std]
data$max = as.numeric(levels(data$max))[data$max]
data
file = paste('dataConvervency4R_',region,'_',0,'_',year,sep="\t")
data = read.csv2(file, sep='\n', header=F)
data$std = as.numeric(levels(data$std))[data$std]
file = paste('dataConvervency4R_',region,'_',0,'_',year,sep="\t")
data = read.csv2(file, sep='\n', header=F)
del data
file = paste('dataConvervency4R_',region,'_',0,'_',year,sep="")
data = read.csv2(file, sep='\t', header=T)
data$std = as.numeric(levels(data$std))[data$std]
data$max = as.numeric(levels(data$max))[data$max]
data
data1 = loadData('Kanto', 2005, 0)
data2 = loadData('Kanto', 2005, 1)
data3 = loadData('Kanto', 2005, 2)
data4 = loadData('Kanto', 2005, 3)
data5 = loadData('Kanto', 2005, 4)
data6 = loadData('Kanto', 2005, 5)
data7 = loadData('Kanto', 2005, 6)
data8 = loadData('Kanto', 2005, 7)
data9 = loadData('Kanto', 2005, 8)
data10 = loadData('Kanto', 2005, 9)
data1 = loadData('Kanto', 2005, 0)
i
i=0
file = paste('dataConvervency4R_',region,'_',0,'_',year,sep="")
data = read.csv2(file, sep='\t', header=T)
data$std = as.numeric(levels(data$std))[data$std]
data$max = as.numeric(levels(data$max))[data$max]
data
data1 = loadData('Kanto', 2005, 0)
data1
ddata10
data10
ddata10
data1
data1 = loadData('Kanto', 2005, 0)
means = c(rep(0,length(data$avg)))
for (i in 1:length(data$avg)){
means[i] = ((data1$avg[i] + data2$avg[i] + data3$avg[i] + data4$avg[i] + data5$avg[i] +
data6$avg[i] + data7$avg[i] + data8$avg[i] + data9$avg[i] + data10$avg[i])/10)
}
p<- ggplot(data, aes(x=gen, y=avg, group=1)) +
geom_line(color='orange') +
geom_point(color='orange')+
geom_errorbar(aes(ymin=data$avg+data$std, ymax=data$avg-data$std), width=0.2, color='black')
print(p)
library(ggplot2)
p<- ggplot(data, aes(x=gen, y=avg, group=1)) +
geom_line(color='orange') +
geom_point(color='orange')+
geom_errorbar(aes(ymin=data$avg+data$std, ymax=data$avg-data$std), width=0.2, color='black')
print(p)
data$max = as.numeric(levels(data$max))[data$max]
i
i=0
file = paste('dataConvervency4R_',region,'_',0,'_',year,sep="")
data = read.csv2(file, sep='\t', header=T)
data$std = as.numeric(levels(data$std))[data$std]
data$max = as.numeric(levels(data$max))[data$max]
return(data)
data1 = loadData('Kanto', 2005, 0)
loadData = function(region, year, i){
file = paste('dataConvervency4R_',region,'_',i,'_',year,sep="")
data = read.csv2(file, sep='\t', header=T)
data$std = as.numeric(levels(data$std))[data$std]
data$max = as.numeric(levels(data$max))[data$max]
return(data)
}
data1 = loadData('Kanto', 2005, 0)
data1 = loadData('Kanto', 2005, 0)
data2 = loadData('Kanto', 2005, 1)
data3 = loadData('Kanto', 2005, 2)
data4 = loadData('Kanto', 2005, 3)
data5 = loadData('Kanto', 2005, 4)
data6 = loadData('Kanto', 2005, 5)
data7 = loadData('Kanto', 2005, 6)
data8 = loadData('Kanto', 2005, 7)
data9 = loadData('Kanto', 2005, 8)
data10 = loadData('Kanto', 2005, 9)
means = c(rep(0,length(data$avg)))
for (i in 1:length(data$avg)){
means[i] = ((data1$avg[i] + data2$avg[i] + data3$avg[i] + data4$avg[i] + data5$avg[i] +
data6$avg[i] + data7$avg[i] + data8$avg[i] + data9$avg[i] + data10$avg[i])/10)
}
library(ggplot2)
p<- ggplot(data, aes(x=gen, y=avg, group=1)) +
geom_line(color='orange') +
geom_point(color='orange')+
geom_errorbar(aes(ymin=data$avg+data$std, ymax=data$avg-data$std), width=0.2, color='black')
print(p)
means = c(rep(0,length(data$avg)))
for (i in 1:length(data$avg)){
means[i] = ((data1$avg[i] + data2$avg[i] + data3$avg[i] + data4$avg[i] + data5$avg[i] +
data6$avg[i] + data7$avg[i] + data8$avg[i] + data9$avg[i] + data10$avg[i])/10)
}
(data1$avg[1] + data2$avg[1])/2
data = data.frame(
setNames(replicate(2,numeric(0), simplify = F),
c("max", "std")))
data$max = maxs
maxs = c(rep(0,length(data$max)))
for (i in 1:length(data$max)){
maxs[i] = ((data1$max[i] + data2$max[i] + data3$max[i] + data4$max[i] + data5$max[i] +
data6$max[i] + data7$max[i] + data8$max[i] + data9$max[i] + data10$max[i])/10)
}
data$max = maxs
maxs
maxs = c(rep(0,length(data$max)))
for (i in 1:length(data$max)){
maxs[i] = ((data1$max[i] + data2$max[i] + data3$max[i] + data4$max[i] + data5$max[i] +
data6$max[i] + data7$max[i] + data8$max[i] + data9$max[i] + data10$max[i])/10)
}
maxs
for (i in 1:length(data1$max)){
maxs[i] = ((data1$max[i] + data2$max[i] + data3$max[i] + data4$max[i] + data5$max[i] +
data6$max[i] + data7$max[i] + data8$max[i] + data9$max[i] + data10$max[i])/10)
}
maxs
stds = c(rep(0,length(data1$std)))
for (i in 1:length(data1$std)){
stds[i] = ((data1$std[i] + data2$std[i] + data3$std[i] + data4$std[i] + data5$std[i] +
data6$std[i] + data7$std[i] + data8$std[i] + data9$std[i] + data10$std[i])/10)
}
data = data.frame(
setNames(replicate(2,numeric(0), simplify = F),
c("max", "std")))
data$max = maxs
data$std = stds
max
maxs
data = data.frame(maxs, stds)
data = data.frame(maxs, stds)
library(ggplot2)
p<- ggplot(data, aes(x=maxs, y=stds, group=1)) +
geom_line(color='orange') +
geom_point(color='orange')+
geom_errorbar(aes(ymin=data$maxs+data$stds, ymax=data$maxs-data$stds), width=0.2, color='black')
print(p)
data
ibrary(ggplot2)
p<- ggplot(data, aes(x=maxs, y=stds, group=1)) +
geom_line(color='orange') +
geom_point(color='orange')+
geom_errorbar(aes(ymin=data$maxs+data$stds, ymax=data$maxs-data$stds), width=0.2, color='black')
print(p)
library(ggplot2)
p<- ggplot(data, aes(x=gen, y=maxs, group=1)) +
geom_line(color='orange') +
geom_point(color='orange')+
geom_errorbar(aes(ymin=data$maxs+data$stds, ymax=data$maxs-data$stds), width=0.2, color='black')
print(p)
gen = c(1:100)
data = data.frame(
setNames(replicate(2,numeric(0), simplify = F),
c("max", "std")))
data = data.frame(maxs, stds, gen)
library(ggplot2)
p<- ggplot(data, aes(x=gen, y=maxs, group=1)) +
geom_line(color='orange') +
geom_point(color='orange')+
geom_errorbar(aes(ymin=data$maxs+data$stds, ymax=data$maxs-data$stds), width=0.2, color='black')
print(p)
p+labs(title="Convergency Analysis", x="generation", y = "log-likelihood")
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("data.table")
require("knitr")
knitr::opts_knit$set(root.dir = "~/Documents/estudos/earthquakemodels/result_exp_benchmark/pseudo-adaptative")
knitr::opts_chunk$set(fig.pos = 'H')
knitr::opts_chunk$set(cache=TRUE)
library(ggplot2)
library(gridExtra)
par(mfrow=c(2,1))
#create function to read data with paste - benchmarks
loadDataBenchmarksF7_F24 = function(type, i,  nrows = 500, skip=2){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip=skip)
return(data)
}
loadDataBenchmarksF1_F6 = function(type, i,  nrows = 500, skip=0){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip = skip)
return(data)
}
# create function to find the mean of the 40 execs
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<7){
data=loadDataBenchmarksF1_F6(name_function,i-1)
}
else{
data=loadDataBenchmarksF7_F24(name_function,i-1)
}
vectorAuxMean[i] = tail(data, 2)$min[1]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
findMaxBenchmarks = function(benchmarck_index_function){
df<-data.frame()
for (i in 2:25){
name_function=paste('F',benchmarck_index_function,'_',i,sep='')
aux<-createMeanFromExecBenchmarks(name_function, benchmarck_index_function)
df<-rbind(df, aux)
}
return(df)
}
# create function to find the max value and where it is located
findMaxPosBenchmarks = function (benchmarck_index_function){
vectorAuxMax=findMaxBenchmarks(benchmarck_index_function)
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and std' , sep=''))
print(p1+ theme(legend.position="none"))
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
# geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and C.I.' , sep='')) +
geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
print(p1+ theme(legend.position="none"))
}
for (i in 1:24){
findMaxPosBenchmarks(i)
}
setwd("~/Documents/estudos/earthquakemodels/result_exp_benchmark/pseudo-adaptative"))
setwd("~/Documents/estudos/earthquakemodels/result_exp_benchmark/pseudo-adaptative")
file()
#create function to read data with paste - benchmarks
loadDataBenchmarksF7_F24 = function(type, i,  nrows = 500, skip=2){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip=skip)
return(data)
}
loadDataBenchmarksF1_F6 = function(type, i,  nrows = 500, skip=0){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows, skip = skip)
return(data)
}
# create function to find the mean of the 40 execs
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<7){
data=loadDataBenchmarksF1_F6(name_function,i-1)
}
else{
data=loadDataBenchmarksF7_F24(name_function,i-1)
}
vectorAuxMean[i] = tail(data, 2)$min[1]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
findMaxBenchmarks = function(benchmarck_index_function){
df<-data.frame()
for (i in 2:25){
name_function=paste('F',benchmarck_index_function,'_',i,sep='')
aux<-createMeanFromExecBenchmarks(name_function, benchmarck_index_function)
df<-rbind(df, aux)
}
return(df)
}
# create function to find the max value and where it is located
findMaxPosBenchmarks = function (benchmarck_index_function){
vectorAuxMax=findMaxBenchmarks(benchmarck_index_function)
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and std' , sep=''))
print(p1+ theme(legend.position="none"))
p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
# geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('tournament size') +
ylab('function mean value') +
ggtitle(paste("F",benchmarck_index_function,' means and C.I.' , sep='')) +
geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
print(p1+ theme(legend.position="none"))
}
for (i in 1:24){
findMaxPosBenchmarks(i)
}
